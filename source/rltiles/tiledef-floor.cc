// This file has been automatically generated.

#include "tiledef-floor.h"

#include <string>
#include <cstring>
#include <cassert>
using namespace std;

unsigned int _tile_floor_count[TILE_FLOOR_MAX - 0] =
{
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    16,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    7,
    1,
    1,
    1,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    4,
    1,
    1,
    1,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    12,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    6,
    1,
    1,
    1,
    1,
    1,
    10,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    7,
    1,
    1,
    1,
    1,
    1,
    1,
    6,
    1,
    1,
    1,
    1,
    1,
    12,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    3,
    1,
    1,
    7,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    3,
    1,
    1,
    9,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    10,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
};

unsigned int tile_floor_count(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILE_FLOOR_MAX);
    return _tile_floor_count[idx - 0];
}

tileidx_t _tile_floor_basetiles[TILE_FLOOR_MAX - 0] =
{
    0,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    2,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    10,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    19,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    28,
    37,
    37,
    37,
    37,
    37,
    37,
    37,
    37,
    37,
    46,
    46,
    46,
    46,
    46,
    46,
    46,
    46,
    46,
    55,
    55,
    55,
    55,
    55,
    55,
    55,
    55,
    55,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    64,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    73,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    82,
    91,
    91,
    91,
    91,
    91,
    91,
    91,
    91,
    91,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    100,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    109,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    118,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    145,
    145,
    145,
    145,
    149,
    149,
    149,
    149,
    153,
    153,
    153,
    153,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    157,
    173,
    173,
    173,
    173,
    177,
    177,
    177,
    177,
    181,
    181,
    181,
    181,
    185,
    185,
    185,
    185,
    189,
    189,
    189,
    189,
    193,
    193,
    193,
    193,
    197,
    197,
    197,
    197,
    197,
    197,
    197,
    204,
    204,
    204,
    204,
    208,
    208,
    208,
    208,
    212,
    212,
    212,
    212,
    216,
    216,
    216,
    216,
    220,
    220,
    220,
    220,
    224,
    224,
    224,
    224,
    228,
    228,
    228,
    228,
    232,
    232,
    232,
    232,
    236,
    236,
    236,
    236,
    240,
    240,
    240,
    240,
    244,
    244,
    244,
    244,
    248,
    248,
    248,
    248,
    252,
    252,
    252,
    252,
    256,
    256,
    256,
    256,
    260,
    260,
    260,
    260,
    264,
    264,
    264,
    264,
    264,
    264,
    264,
    264,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    272,
    284,
    284,
    284,
    284,
    284,
    284,
    290,
    290,
    290,
    290,
    290,
    290,
    290,
    290,
    290,
    290,
    300,
    300,
    300,
    300,
    300,
    300,
    300,
    307,
    307,
    307,
    307,
    307,
    307,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    313,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    334,
    334,
    334,
    337,
    337,
    337,
    337,
    337,
    337,
    337,
    344,
    344,
    344,
    344,
    344,
    344,
    344,
    344,
    344,
    353,
    353,
    353,
    353,
    353,
    353,
    353,
    353,
    353,
    362,
    362,
    362,
    365,
    365,
    365,
    365,
    365,
    365,
    365,
    365,
    365,
    374,
    375,
    375,
    375,
    375,
    375,
    375,
    375,
    375,
    375,
    375,
    385,
    386,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
};

tileidx_t tile_floor_basetile(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILE_FLOOR_MAX);
    return _tile_floor_basetiles[idx - 0];
}

int _tile_floor_probs[TILE_FLOOR_MAX - 0] =
{
    1,
    1,
    6,
    12,
    18,
    24,
    30,
    36,
    39,
    40,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    16,
    32,
    48,
    64,
    80,
    88,
    96,
    104,
    112,
    120,
    126,
    132,
    135,
    138,
    140,
    141,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    1,
    2,
    3,
    4,
    5,
    10,
    15,
    20,
    22,
    24,
    26,
    27,
    5,
    10,
    15,
    20,
    25,
    28,
    31,
    33,
    35,
    37,
    39,
    40,
    1,
    2,
    3,
    4,
    5,
    6,
    5,
    10,
    15,
    20,
    25,
    27,
    28,
    29,
    30,
    31,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    12,
    16,
    18,
    20,
    21,
    15,
    30,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    2,
    3,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    1,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
};

int tile_floor_probs(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILE_FLOOR_MAX);
    return _tile_floor_probs[idx - 0];
}

const char *_tile_floor_name[TILE_FLOOR_MAX - 0] =
{
    "DNGN_UNSEEN",
    "DNGN_ERROR",
    "FLOOR_GREY_DIRT",
    "FLOOR_GREY_DIRT_1",
    "FLOOR_GREY_DIRT_2",
    "FLOOR_GREY_DIRT_3",
    "FLOOR_GREY_DIRT_4",
    "FLOOR_GREY_DIRT_5",
    "FLOOR_GREY_DIRT_6",
    "FLOOR_GREY_DIRT_7",
    "FLOOR_PEBBLE",
    "FLOOR_PEBBLE_1",
    "FLOOR_PEBBLE_2",
    "FLOOR_PEBBLE_3",
    "FLOOR_PEBBLE_4",
    "FLOOR_PEBBLE_5",
    "FLOOR_PEBBLE_6",
    "FLOOR_PEBBLE_7",
    "FLOOR_PEBBLE_8",
    "FLOOR_PEBBLE_BROWN",
    "FLOOR_PEBBLE_BROWN_1",
    "FLOOR_PEBBLE_BROWN_2",
    "FLOOR_PEBBLE_BROWN_3",
    "FLOOR_PEBBLE_BROWN_4",
    "FLOOR_PEBBLE_BROWN_5",
    "FLOOR_PEBBLE_BROWN_6",
    "FLOOR_PEBBLE_BROWN_7",
    "FLOOR_PEBBLE_BROWN_8",
    "FLOOR_PEBBLE_BLUE",
    "FLOOR_PEBBLE_BLUE_1",
    "FLOOR_PEBBLE_BLUE_2",
    "FLOOR_PEBBLE_BLUE_3",
    "FLOOR_PEBBLE_BLUE_4",
    "FLOOR_PEBBLE_BLUE_5",
    "FLOOR_PEBBLE_BLUE_6",
    "FLOOR_PEBBLE_BLUE_7",
    "FLOOR_PEBBLE_BLUE_8",
    "FLOOR_PEBBLE_GREEN",
    "FLOOR_PEBBLE_GREEN_1",
    "FLOOR_PEBBLE_GREEN_2",
    "FLOOR_PEBBLE_GREEN_3",
    "FLOOR_PEBBLE_GREEN_4",
    "FLOOR_PEBBLE_GREEN_5",
    "FLOOR_PEBBLE_GREEN_6",
    "FLOOR_PEBBLE_GREEN_7",
    "FLOOR_PEBBLE_GREEN_8",
    "FLOOR_PEBBLE_CYAN",
    "FLOOR_PEBBLE_CYAN_1",
    "FLOOR_PEBBLE_CYAN_2",
    "FLOOR_PEBBLE_CYAN_3",
    "FLOOR_PEBBLE_CYAN_4",
    "FLOOR_PEBBLE_CYAN_5",
    "FLOOR_PEBBLE_CYAN_6",
    "FLOOR_PEBBLE_CYAN_7",
    "FLOOR_PEBBLE_CYAN_8",
    "FLOOR_PEBBLE_RED",
    "FLOOR_PEBBLE_RED_1",
    "FLOOR_PEBBLE_RED_2",
    "FLOOR_PEBBLE_RED_3",
    "FLOOR_PEBBLE_RED_4",
    "FLOOR_PEBBLE_RED_5",
    "FLOOR_PEBBLE_RED_6",
    "FLOOR_PEBBLE_RED_7",
    "FLOOR_PEBBLE_RED_8",
    "FLOOR_PEBBLE_MAGENTA",
    "FLOOR_PEBBLE_MAGENTA_1",
    "FLOOR_PEBBLE_MAGENTA_2",
    "FLOOR_PEBBLE_MAGENTA_3",
    "FLOOR_PEBBLE_MAGENTA_4",
    "FLOOR_PEBBLE_MAGENTA_5",
    "FLOOR_PEBBLE_MAGENTA_6",
    "FLOOR_PEBBLE_MAGENTA_7",
    "FLOOR_PEBBLE_MAGENTA_8",
    "FLOOR_PEBBLE_DARKGRAY",
    "FLOOR_PEBBLE_DARKGRAY_1",
    "FLOOR_PEBBLE_DARKGRAY_2",
    "FLOOR_PEBBLE_DARKGRAY_3",
    "FLOOR_PEBBLE_DARKGRAY_4",
    "FLOOR_PEBBLE_DARKGRAY_5",
    "FLOOR_PEBBLE_DARKGRAY_6",
    "FLOOR_PEBBLE_DARKGRAY_7",
    "FLOOR_PEBBLE_DARKGRAY_8",
    "FLOOR_PEBBLE_LIGHTBLUE",
    "FLOOR_PEBBLE_LIGHTBLUE_1",
    "FLOOR_PEBBLE_LIGHTBLUE_2",
    "FLOOR_PEBBLE_LIGHTBLUE_3",
    "FLOOR_PEBBLE_LIGHTBLUE_4",
    "FLOOR_PEBBLE_LIGHTBLUE_5",
    "FLOOR_PEBBLE_LIGHTBLUE_6",
    "FLOOR_PEBBLE_LIGHTBLUE_7",
    "FLOOR_PEBBLE_LIGHTBLUE_8",
    "FLOOR_PEBBLE_LIGHTGREEN",
    "FLOOR_PEBBLE_LIGHTGREEN_1",
    "FLOOR_PEBBLE_LIGHTGREEN_2",
    "FLOOR_PEBBLE_LIGHTGREEN_3",
    "FLOOR_PEBBLE_LIGHTGREEN_4",
    "FLOOR_PEBBLE_LIGHTGREEN_5",
    "FLOOR_PEBBLE_LIGHTGREEN_6",
    "FLOOR_PEBBLE_LIGHTGREEN_7",
    "FLOOR_PEBBLE_LIGHTGREEN_8",
    "FLOOR_PEBBLE_LIGHTCYAN",
    "FLOOR_PEBBLE_LIGHTCYAN_1",
    "FLOOR_PEBBLE_LIGHTCYAN_2",
    "FLOOR_PEBBLE_LIGHTCYAN_3",
    "FLOOR_PEBBLE_LIGHTCYAN_4",
    "FLOOR_PEBBLE_LIGHTCYAN_5",
    "FLOOR_PEBBLE_LIGHTCYAN_6",
    "FLOOR_PEBBLE_LIGHTCYAN_7",
    "FLOOR_PEBBLE_LIGHTCYAN_8",
    "FLOOR_PEBBLE_LIGHTRED",
    "FLOOR_PEBBLE_LIGHTRED_1",
    "FLOOR_PEBBLE_LIGHTRED_2",
    "FLOOR_PEBBLE_LIGHTRED_3",
    "FLOOR_PEBBLE_LIGHTRED_4",
    "FLOOR_PEBBLE_LIGHTRED_5",
    "FLOOR_PEBBLE_LIGHTRED_6",
    "FLOOR_PEBBLE_LIGHTRED_7",
    "FLOOR_PEBBLE_LIGHTRED_8",
    "FLOOR_PEBBLE_LIGHTMAGENTA",
    "FLOOR_PEBBLE_LIGHTMAGENTA_1",
    "FLOOR_PEBBLE_LIGHTMAGENTA_2",
    "FLOOR_PEBBLE_LIGHTMAGENTA_3",
    "FLOOR_PEBBLE_LIGHTMAGENTA_4",
    "FLOOR_PEBBLE_LIGHTMAGENTA_5",
    "FLOOR_PEBBLE_LIGHTMAGENTA_6",
    "FLOOR_PEBBLE_LIGHTMAGENTA_7",
    "FLOOR_PEBBLE_LIGHTMAGENTA_8",
    "FLOOR_PEBBLE_YELLOW",
    "FLOOR_PEBBLE_YELLOW_1",
    "FLOOR_PEBBLE_YELLOW_2",
    "FLOOR_PEBBLE_YELLOW_3",
    "FLOOR_PEBBLE_YELLOW_4",
    "FLOOR_PEBBLE_YELLOW_5",
    "FLOOR_PEBBLE_YELLOW_6",
    "FLOOR_PEBBLE_YELLOW_7",
    "FLOOR_PEBBLE_YELLOW_8",
    "FLOOR_PEBBLE_WHITE",
    "FLOOR_PEBBLE_WHITE_1",
    "FLOOR_PEBBLE_WHITE_2",
    "FLOOR_PEBBLE_WHITE_3",
    "FLOOR_PEBBLE_WHITE_4",
    "FLOOR_PEBBLE_WHITE_5",
    "FLOOR_PEBBLE_WHITE_6",
    "FLOOR_PEBBLE_WHITE_7",
    "FLOOR_PEBBLE_WHITE_8",
    "FLOOR_HALL",
    "FLOOR_HALL_1",
    "FLOOR_HALL_2",
    "FLOOR_HALL_3",
    "FLOOR_HIVE",
    "FLOOR_HIVE_1",
    "FLOOR_HIVE_2",
    "FLOOR_HIVE_3",
    "FLOOR_ICE",
    "FLOOR_ICE_1",
    "FLOOR_ICE_2",
    "FLOOR_ICE_3",
    "FLOOR_LAIR",
    "FLOOR_LAIR_1",
    "FLOOR_LAIR_2",
    "FLOOR_LAIR_3",
    "FLOOR_LAIR_4",
    "FLOOR_LAIR_5",
    "FLOOR_LAIR_6",
    "FLOOR_LAIR_7",
    "FLOOR_LAIR_8",
    "FLOOR_LAIR_9",
    "FLOOR_LAIR_10",
    "FLOOR_LAIR_11",
    "FLOOR_LAIR_12",
    "FLOOR_LAIR_13",
    "FLOOR_LAIR_14",
    "FLOOR_LAIR_15",
    "FLOOR_MOSS",
    "FLOOR_MOSS_1",
    "FLOOR_MOSS_2",
    "FLOOR_MOSS_3",
    "FLOOR_SLIME",
    "FLOOR_SLIME_1",
    "FLOOR_SLIME_2",
    "FLOOR_SLIME_3",
    "FLOOR_SNAKE",
    "FLOOR_SNAKE_1",
    "FLOOR_SNAKE_2",
    "FLOOR_SNAKE_3",
    "FLOOR_SWAMP",
    "FLOOR_SWAMP_1",
    "FLOOR_SWAMP_2",
    "FLOOR_SWAMP_3",
    "FLOOR_TOMB",
    "FLOOR_TOMB_1",
    "FLOOR_TOMB_2",
    "FLOOR_TOMB_3",
    "FLOOR_VAULT",
    "FLOOR_VAULT_1",
    "FLOOR_VAULT_2",
    "FLOOR_VAULT_3",
    "FLOOR_VINES",
    "FLOOR_VINES_1",
    "FLOOR_VINES_2",
    "FLOOR_VINES_3",
    "FLOOR_VINES_4",
    "FLOOR_VINES_5",
    "FLOOR_VINES_6",
    "FLOOR_ROUGH",
    "FLOOR_ROUGH_1",
    "FLOOR_ROUGH_2",
    "FLOOR_ROUGH_3",
    "FLOOR_ROUGH_BLUE",
    "FLOOR_ROUGH_BLUE_1",
    "FLOOR_ROUGH_BLUE_2",
    "FLOOR_ROUGH_BLUE_3",
    "FLOOR_ROUGH_GREEN",
    "FLOOR_ROUGH_GREEN_1",
    "FLOOR_ROUGH_GREEN_2",
    "FLOOR_ROUGH_GREEN_3",
    "FLOOR_ROUGH_CYAN",
    "FLOOR_ROUGH_CYAN_1",
    "FLOOR_ROUGH_CYAN_2",
    "FLOOR_ROUGH_CYAN_3",
    "FLOOR_ROUGH_MAGENTA",
    "FLOOR_ROUGH_MAGENTA_1",
    "FLOOR_ROUGH_MAGENTA_2",
    "FLOOR_ROUGH_MAGENTA_3",
    "FLOOR_ROUGH_BROWN",
    "FLOOR_ROUGH_BROWN_1",
    "FLOOR_ROUGH_BROWN_2",
    "FLOOR_ROUGH_BROWN_3",
    "FLOOR_ROUGH_LIGHTGRAY",
    "FLOOR_ROUGH_LIGHTGRAY_1",
    "FLOOR_ROUGH_LIGHTGRAY_2",
    "FLOOR_ROUGH_LIGHTGRAY_3",
    "FLOOR_ROUGH_DARKGRAY",
    "FLOOR_ROUGH_DARKGRAY_1",
    "FLOOR_ROUGH_DARKGRAY_2",
    "FLOOR_ROUGH_DARKGRAY_3",
    "FLOOR_ROUGH_LIGHTBLUE",
    "FLOOR_ROUGH_LIGHTBLUE_1",
    "FLOOR_ROUGH_LIGHTBLUE_2",
    "FLOOR_ROUGH_LIGHTBLUE_3",
    "FLOOR_ROUGH_LIGHTGREEN",
    "FLOOR_ROUGH_LIGHTGREEN_1",
    "FLOOR_ROUGH_LIGHTGREEN_2",
    "FLOOR_ROUGH_LIGHTGREEN_3",
    "FLOOR_ROUGH_LIGHTCYAN",
    "FLOOR_ROUGH_LIGHTCYAN_1",
    "FLOOR_ROUGH_LIGHTCYAN_2",
    "FLOOR_ROUGH_LIGHTCYAN_3",
    "FLOOR_ROUGH_LIGHTRED",
    "FLOOR_ROUGH_LIGHTRED_1",
    "FLOOR_ROUGH_LIGHTRED_2",
    "FLOOR_ROUGH_LIGHTRED_3",
    "FLOOR_ROUGH_LIGHTMAGENTA",
    "FLOOR_ROUGH_LIGHTMAGENTA_1",
    "FLOOR_ROUGH_LIGHTMAGENTA_2",
    "FLOOR_ROUGH_LIGHTMAGENTA_3",
    "FLOOR_ROUGH_YELLOW",
    "FLOOR_ROUGH_YELLOW_1",
    "FLOOR_ROUGH_YELLOW_2",
    "FLOOR_ROUGH_YELLOW_3",
    "FLOOR_ROUGH_WHITE",
    "FLOOR_ROUGH_WHITE_1",
    "FLOOR_ROUGH_WHITE_2",
    "FLOOR_ROUGH_WHITE_3",
    "FLOOR_SAND_STONE",
    "FLOOR_SAND_STONE_1",
    "FLOOR_SAND_STONE_2",
    "FLOOR_SAND_STONE_3",
    "FLOOR_SAND_STONE_4",
    "FLOOR_SAND_STONE_5",
    "FLOOR_SAND_STONE_6",
    "FLOOR_SAND_STONE_7",
    "FLOOR_COBBLE_BLOOD",
    "FLOOR_COBBLE_BLOOD_1",
    "FLOOR_COBBLE_BLOOD_2",
    "FLOOR_COBBLE_BLOOD_3",
    "FLOOR_COBBLE_BLOOD_4",
    "FLOOR_COBBLE_BLOOD_5",
    "FLOOR_COBBLE_BLOOD_6",
    "FLOOR_COBBLE_BLOOD_7",
    "FLOOR_COBBLE_BLOOD_8",
    "FLOOR_COBBLE_BLOOD_9",
    "FLOOR_COBBLE_BLOOD_10",
    "FLOOR_COBBLE_BLOOD_11",
    "FLOOR_MARBLE",
    "FLOOR_MARBLE_1",
    "FLOOR_MARBLE_2",
    "FLOOR_MARBLE_3",
    "FLOOR_MARBLE_4",
    "FLOOR_MARBLE_5",
    "FLOOR_SANDSTONE",
    "FLOOR_SANDSTONE_1",
    "FLOOR_SANDSTONE_2",
    "FLOOR_SANDSTONE_3",
    "FLOOR_SANDSTONE_4",
    "FLOOR_SANDSTONE_5",
    "FLOOR_SANDSTONE_6",
    "FLOOR_SANDSTONE_7",
    "FLOOR_SANDSTONE_8",
    "FLOOR_SANDSTONE_9",
    "FLOOR_VOLCANIC",
    "FLOOR_VOLCANIC_1",
    "FLOOR_VOLCANIC_2",
    "FLOOR_VOLCANIC_3",
    "FLOOR_VOLCANIC_4",
    "FLOOR_VOLCANIC_5",
    "FLOOR_VOLCANIC_6",
    "FLOOR_CRYSTAL_SQUARES",
    "FLOOR_CRYSTAL_SQUARES_1",
    "FLOOR_CRYSTAL_SQUARES_2",
    "FLOOR_CRYSTAL_SQUARES_3",
    "FLOOR_CRYSTAL_SQUARES_4",
    "FLOOR_CRYSTAL_SQUARES_5",
    "FLOOR_GRASS",
    "FLOOR_GRASS_1",
    "FLOOR_GRASS_2",
    "FLOOR_GRASS_3",
    "FLOOR_GRASS_4",
    "FLOOR_GRASS_5",
    "FLOOR_GRASS_6",
    "FLOOR_GRASS_7",
    "FLOOR_GRASS_8",
    "FLOOR_GRASS_9",
    "FLOOR_GRASS_10",
    "FLOOR_GRASS_11",
    "HALO_GRASS",
    "HALO_GRASS_1",
    "HALO_GRASS_2",
    "HALO_GRASS_3",
    "HALO_GRASS_4",
    "HALO_GRASS_5",
    "HALO_GRASS_6",
    "HALO_GRASS_7",
    "HALO_GRASS_8",
    "FLOOR_GRASS_DIRT_MIX",
    "FLOOR_GRASS_DIRT_MIX_1",
    "FLOOR_GRASS_DIRT_MIX_2",
    "FLOOR_NERVES",
    "FLOOR_NERVES_1",
    "FLOOR_NERVES_2",
    "FLOOR_NERVES_3",
    "FLOOR_NERVES_4",
    "FLOOR_NERVES_5",
    "FLOOR_NERVES_6",
    "HALO_GRASS2",
    "HALO_GRASS2_1",
    "HALO_GRASS2_2",
    "HALO_GRASS2_3",
    "HALO_GRASS2_4",
    "HALO_GRASS2_5",
    "HALO_GRASS2_6",
    "HALO_GRASS2_7",
    "HALO_GRASS2_8",
    "HALO_VAULT",
    "HALO_VAULT_1",
    "HALO_VAULT_2",
    "HALO_VAULT_3",
    "HALO_VAULT_4",
    "HALO_VAULT_5",
    "HALO_VAULT_6",
    "HALO_VAULT_7",
    "HALO_VAULT_8",
    "FLOOR_DIRT",
    "FLOOR_DIRT_1",
    "FLOOR_DIRT_2",
    "HALO_DIRT",
    "HALO_DIRT_1",
    "HALO_DIRT_2",
    "HALO_DIRT_3",
    "HALO_DIRT_4",
    "HALO_DIRT_5",
    "HALO_DIRT_6",
    "HALO_DIRT_7",
    "HALO_DIRT_8",
    "TUTORIAL_PAD",
    "FLOOR_LIMESTONE",
    "FLOOR_LIMESTONE_1",
    "FLOOR_LIMESTONE_2",
    "FLOOR_LIMESTONE_3",
    "FLOOR_LIMESTONE_4",
    "FLOOR_LIMESTONE_5",
    "FLOOR_LIMESTONE_6",
    "FLOOR_LIMESTONE_7",
    "FLOOR_LIMESTONE_8",
    "FLOOR_LIMESTONE_9",
    "SIGIL_CURVE_N_E",
    "SIGIL_CURVE_N_W",
    "SIGIL_CURVE_S_E",
    "SIGIL_CURVE_S_W",
    "SIGIL_STRAIGHT_E_W",
    "SIGIL_STRAIGHT_N_S",
    "SIGIL_STRAIGHT_NE_SW",
    "SIGIL_STRAIGHT_NW_SE",
    "SIGIL_CROSS",
    "SIGIL_CIRCLE",
    "SIGIL_RHOMBUS",
    "SIGIL_Y",
    "SIGIL_Y_INVERTED",
    "SIGIL_Y_RIGHT",
    "SIGIL_Y_LEFT",
    "SIGIL_Y_LEFTLEANING",
    "SIGIL_Y_RIGHTLEANING",
    "SIGIL_ALGIZ_LEFT",
    "SIGIL_ALGIZ_RIGHT",
    "SIGIL_STRAIGHT_E_NW",
    "SIGIL_STRAIGHT_E_SW",
    "SIGIL_STRAIGHT_W_NE",
    "SIGIL_STRAIGHT_W_SE",
    "SIGIL_STRAIGHT_N_SE",
    "SIGIL_STRAIGHT_N_SW",
    "SIGIL_STRAIGHT_S_NE",
    "SIGIL_STRAIGHT_S_NW",
    "SIGIL_FOURWAY",
    "SIGIL_SHARP_E_NE",
    "SIGIL_SHARP_W_SW",
    "SIGIL_STRAIGHT_E_NE_SW",
};

const char *tile_floor_name(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILE_FLOOR_MAX);
    return _tile_floor_name[idx - 0];
}

tile_info _tile_floor_info[TILE_FLOOR_MAX - 0] =
{
    tile_info(32, 32, 0, 0, 0, 0, 32, 32),
    tile_info(32, 32, 0, 0, 32, 0, 64, 32),
    tile_info(32, 32, 0, 0, 64, 0, 96, 32),
    tile_info(32, 32, 0, 0, 96, 0, 128, 32),
    tile_info(32, 32, 0, 0, 128, 0, 160, 32),
    tile_info(32, 32, 0, 0, 160, 0, 192, 32),
    tile_info(32, 32, 0, 0, 192, 0, 224, 32),
    tile_info(32, 32, 0, 0, 224, 0, 256, 32),
    tile_info(32, 32, 0, 0, 256, 0, 288, 32),
    tile_info(32, 32, 0, 0, 288, 0, 320, 32),
    tile_info(32, 32, 1, 1, 320, 0, 351, 31),
    tile_info(32, 32, 1, 1, 351, 0, 382, 31),
    tile_info(32, 32, 0, 0, 382, 0, 414, 32),
    tile_info(32, 32, 0, 0, 414, 0, 446, 32),
    tile_info(32, 32, 1, 1, 446, 0, 477, 31),
    tile_info(32, 32, 1, 1, 477, 0, 508, 31),
    tile_info(32, 32, 1, 0, 508, 0, 539, 32),
    tile_info(32, 32, 0, 0, 539, 0, 571, 32),
    tile_info(32, 32, 0, 0, 571, 0, 603, 32),
    tile_info(32, 32, 1, 1, 603, 0, 634, 31),
    tile_info(32, 32, 1, 1, 634, 0, 665, 31),
    tile_info(32, 32, 0, 0, 665, 0, 697, 32),
    tile_info(32, 32, 0, 0, 697, 0, 729, 32),
    tile_info(32, 32, 1, 1, 729, 0, 760, 31),
    tile_info(32, 32, 1, 1, 760, 0, 791, 31),
    tile_info(32, 32, 1, 0, 791, 0, 822, 32),
    tile_info(32, 32, 0, 0, 822, 0, 854, 32),
    tile_info(32, 32, 0, 0, 854, 0, 886, 32),
    tile_info(32, 32, 1, 1, 886, 0, 917, 31),
    tile_info(32, 32, 1, 1, 917, 0, 948, 31),
    tile_info(32, 32, 0, 0, 948, 0, 980, 32),
    tile_info(32, 32, 0, 0, 980, 0, 1012, 32),
    tile_info(32, 32, 1, 1, 0, 32, 31, 63),
    tile_info(32, 32, 1, 1, 31, 32, 62, 63),
    tile_info(32, 32, 1, 0, 62, 32, 93, 64),
    tile_info(32, 32, 0, 0, 93, 32, 125, 64),
    tile_info(32, 32, 0, 0, 125, 32, 157, 64),
    tile_info(32, 32, 1, 1, 157, 32, 188, 63),
    tile_info(32, 32, 1, 1, 188, 32, 219, 63),
    tile_info(32, 32, 0, 0, 219, 32, 251, 64),
    tile_info(32, 32, 0, 0, 251, 32, 283, 64),
    tile_info(32, 32, 1, 1, 283, 32, 314, 63),
    tile_info(32, 32, 1, 1, 314, 32, 345, 63),
    tile_info(32, 32, 1, 0, 345, 32, 376, 64),
    tile_info(32, 32, 0, 0, 376, 32, 408, 64),
    tile_info(32, 32, 0, 0, 408, 32, 440, 64),
    tile_info(32, 32, 1, 1, 440, 32, 471, 63),
    tile_info(32, 32, 1, 1, 471, 32, 502, 63),
    tile_info(32, 32, 0, 0, 502, 32, 534, 64),
    tile_info(32, 32, 0, 0, 534, 32, 566, 64),
    tile_info(32, 32, 1, 1, 566, 32, 597, 63),
    tile_info(32, 32, 1, 1, 597, 32, 628, 63),
    tile_info(32, 32, 1, 0, 628, 32, 659, 64),
    tile_info(32, 32, 0, 0, 659, 32, 691, 64),
    tile_info(32, 32, 0, 0, 691, 32, 723, 64),
    tile_info(32, 32, 1, 1, 723, 32, 754, 63),
    tile_info(32, 32, 1, 1, 754, 32, 785, 63),
    tile_info(32, 32, 0, 0, 785, 32, 817, 64),
    tile_info(32, 32, 0, 0, 817, 32, 849, 64),
    tile_info(32, 32, 1, 1, 849, 32, 880, 63),
    tile_info(32, 32, 1, 1, 880, 32, 911, 63),
    tile_info(32, 32, 1, 0, 911, 32, 942, 64),
    tile_info(32, 32, 0, 0, 942, 32, 974, 64),
    tile_info(32, 32, 0, 0, 974, 32, 1006, 64),
    tile_info(32, 32, 1, 1, 0, 64, 31, 95),
    tile_info(32, 32, 1, 1, 31, 64, 62, 95),
    tile_info(32, 32, 0, 0, 62, 64, 94, 96),
    tile_info(32, 32, 0, 0, 94, 64, 126, 96),
    tile_info(32, 32, 1, 1, 126, 64, 157, 95),
    tile_info(32, 32, 1, 1, 157, 64, 188, 95),
    tile_info(32, 32, 1, 0, 188, 64, 219, 96),
    tile_info(32, 32, 0, 0, 219, 64, 251, 96),
    tile_info(32, 32, 0, 0, 251, 64, 283, 96),
    tile_info(32, 32, 1, 1, 283, 64, 314, 95),
    tile_info(32, 32, 1, 1, 314, 64, 345, 95),
    tile_info(32, 32, 0, 0, 345, 64, 377, 96),
    tile_info(32, 32, 0, 0, 377, 64, 409, 96),
    tile_info(32, 32, 1, 1, 409, 64, 440, 95),
    tile_info(32, 32, 1, 1, 440, 64, 471, 95),
    tile_info(32, 32, 1, 0, 471, 64, 502, 96),
    tile_info(32, 32, 0, 0, 502, 64, 534, 96),
    tile_info(32, 32, 0, 0, 534, 64, 566, 96),
    tile_info(32, 32, 1, 1, 566, 64, 597, 95),
    tile_info(32, 32, 1, 1, 597, 64, 628, 95),
    tile_info(32, 32, 0, 0, 628, 64, 660, 96),
    tile_info(32, 32, 0, 0, 660, 64, 692, 96),
    tile_info(32, 32, 1, 1, 692, 64, 723, 95),
    tile_info(32, 32, 1, 1, 723, 64, 754, 95),
    tile_info(32, 32, 1, 0, 754, 64, 785, 96),
    tile_info(32, 32, 0, 0, 785, 64, 817, 96),
    tile_info(32, 32, 0, 0, 817, 64, 849, 96),
    tile_info(32, 32, 1, 1, 849, 64, 880, 95),
    tile_info(32, 32, 1, 1, 880, 64, 911, 95),
    tile_info(32, 32, 0, 0, 911, 64, 943, 96),
    tile_info(32, 32, 0, 0, 943, 64, 975, 96),
    tile_info(32, 32, 1, 1, 975, 64, 1006, 95),
    tile_info(32, 32, 1, 1, 0, 96, 31, 127),
    tile_info(32, 32, 1, 0, 31, 96, 62, 128),
    tile_info(32, 32, 0, 0, 62, 96, 94, 128),
    tile_info(32, 32, 0, 0, 94, 96, 126, 128),
    tile_info(32, 32, 1, 1, 126, 96, 157, 127),
    tile_info(32, 32, 1, 1, 157, 96, 188, 127),
    tile_info(32, 32, 0, 0, 188, 96, 220, 128),
    tile_info(32, 32, 0, 0, 220, 96, 252, 128),
    tile_info(32, 32, 1, 1, 252, 96, 283, 127),
    tile_info(32, 32, 1, 1, 283, 96, 314, 127),
    tile_info(32, 32, 1, 0, 314, 96, 345, 128),
    tile_info(32, 32, 0, 0, 345, 96, 377, 128),
    tile_info(32, 32, 0, 0, 377, 96, 409, 128),
    tile_info(32, 32, 1, 1, 409, 96, 440, 127),
    tile_info(32, 32, 1, 1, 440, 96, 471, 127),
    tile_info(32, 32, 0, 0, 471, 96, 503, 128),
    tile_info(32, 32, 0, 0, 503, 96, 535, 128),
    tile_info(32, 32, 1, 1, 535, 96, 566, 127),
    tile_info(32, 32, 1, 1, 566, 96, 597, 127),
    tile_info(32, 32, 1, 0, 597, 96, 628, 128),
    tile_info(32, 32, 0, 0, 628, 96, 660, 128),
    tile_info(32, 32, 0, 0, 660, 96, 692, 128),
    tile_info(32, 32, 1, 1, 692, 96, 723, 127),
    tile_info(32, 32, 1, 1, 723, 96, 754, 127),
    tile_info(32, 32, 0, 0, 754, 96, 786, 128),
    tile_info(32, 32, 0, 0, 786, 96, 818, 128),
    tile_info(32, 32, 1, 1, 818, 96, 849, 127),
    tile_info(32, 32, 1, 1, 849, 96, 880, 127),
    tile_info(32, 32, 1, 0, 880, 96, 911, 128),
    tile_info(32, 32, 0, 0, 911, 96, 943, 128),
    tile_info(32, 32, 0, 0, 943, 96, 975, 128),
    tile_info(32, 32, 1, 1, 975, 96, 1006, 127),
    tile_info(32, 32, 1, 1, 0, 128, 31, 159),
    tile_info(32, 32, 0, 0, 31, 128, 63, 160),
    tile_info(32, 32, 0, 0, 63, 128, 95, 160),
    tile_info(32, 32, 1, 1, 95, 128, 126, 159),
    tile_info(32, 32, 1, 1, 126, 128, 157, 159),
    tile_info(32, 32, 1, 0, 157, 128, 188, 160),
    tile_info(32, 32, 0, 0, 188, 128, 220, 160),
    tile_info(32, 32, 0, 0, 220, 128, 252, 160),
    tile_info(32, 32, 1, 1, 252, 128, 283, 159),
    tile_info(32, 32, 1, 1, 283, 128, 314, 159),
    tile_info(32, 32, 0, 0, 314, 128, 346, 160),
    tile_info(32, 32, 0, 0, 346, 128, 378, 160),
    tile_info(32, 32, 1, 1, 378, 128, 409, 159),
    tile_info(32, 32, 1, 1, 409, 128, 440, 159),
    tile_info(32, 32, 1, 0, 440, 128, 471, 160),
    tile_info(32, 32, 0, 0, 471, 128, 503, 160),
    tile_info(32, 32, 0, 0, 503, 128, 535, 160),
    tile_info(32, 32, 0, 0, 535, 128, 567, 160),
    tile_info(32, 32, 0, 0, 567, 128, 599, 160),
    tile_info(32, 32, 0, 0, 599, 128, 631, 160),
    tile_info(32, 32, 0, 0, 631, 128, 663, 160),
    tile_info(32, 32, 0, 0, 663, 128, 695, 160),
    tile_info(32, 32, 0, 0, 695, 128, 727, 160),
    tile_info(32, 32, 0, 0, 727, 128, 759, 160),
    tile_info(32, 32, 0, 0, 759, 128, 791, 160),
    tile_info(32, 32, 0, 0, 791, 128, 823, 160),
    tile_info(32, 32, 0, 0, 823, 128, 855, 160),
    tile_info(32, 32, 0, 0, 855, 128, 887, 160),
    tile_info(32, 32, 0, 0, 887, 128, 919, 160),
    tile_info(32, 32, 0, 0, 919, 128, 951, 160),
    tile_info(32, 32, 0, 0, 951, 128, 983, 160),
    tile_info(32, 32, 0, 0, 983, 128, 1015, 160),
    tile_info(32, 32, 0, 0, 0, 160, 32, 192),
    tile_info(32, 32, 0, 0, 32, 160, 64, 192),
    tile_info(32, 32, 0, 0, 64, 160, 96, 192),
    tile_info(32, 32, 0, 0, 96, 160, 128, 192),
    tile_info(32, 32, 0, 0, 128, 160, 160, 192),
    tile_info(32, 32, 0, 0, 160, 160, 192, 192),
    tile_info(32, 32, 0, 0, 192, 160, 224, 192),
    tile_info(32, 32, 0, 0, 224, 160, 256, 192),
    tile_info(32, 32, 0, 0, 256, 160, 288, 192),
    tile_info(32, 32, 0, 0, 288, 160, 320, 192),
    tile_info(32, 32, 0, 0, 320, 160, 352, 192),
    tile_info(32, 32, 0, 0, 352, 160, 384, 192),
    tile_info(32, 32, 0, 0, 384, 160, 416, 192),
    tile_info(32, 32, 0, 0, 416, 160, 448, 192),
    tile_info(32, 32, 0, 0, 448, 160, 480, 192),
    tile_info(32, 32, 0, 0, 480, 160, 512, 192),
    tile_info(32, 32, 0, 0, 512, 160, 544, 192),
    tile_info(32, 32, 0, 0, 544, 160, 576, 192),
    tile_info(32, 32, 0, 0, 576, 160, 608, 192),
    tile_info(32, 32, 0, 0, 608, 160, 640, 192),
    tile_info(32, 32, 0, 0, 640, 160, 672, 192),
    tile_info(32, 32, 0, 0, 672, 160, 704, 192),
    tile_info(32, 32, 0, 0, 704, 160, 736, 192),
    tile_info(32, 32, 0, 0, 736, 160, 768, 192),
    tile_info(32, 32, 0, 0, 768, 160, 800, 192),
    tile_info(32, 32, 0, 0, 800, 160, 832, 192),
    tile_info(32, 32, 0, 0, 832, 160, 864, 192),
    tile_info(32, 32, 0, 0, 864, 160, 896, 192),
    tile_info(32, 32, 0, 0, 896, 160, 928, 192),
    tile_info(32, 32, 0, 0, 928, 160, 960, 192),
    tile_info(32, 32, 0, 0, 960, 160, 992, 192),
    tile_info(32, 32, 0, 0, 992, 160, 1024, 192),
    tile_info(32, 32, 0, 0, 0, 192, 32, 224),
    tile_info(32, 32, 0, 0, 32, 192, 64, 224),
    tile_info(32, 32, 0, 0, 64, 192, 96, 224),
    tile_info(32, 32, 0, 0, 96, 192, 128, 224),
    tile_info(32, 32, 0, 0, 128, 192, 160, 224),
    tile_info(32, 32, 0, 0, 160, 192, 192, 224),
    tile_info(32, 32, 0, 0, 192, 192, 224, 224),
    tile_info(32, 32, 0, 0, 224, 192, 256, 224),
    tile_info(32, 32, 0, 0, 256, 192, 288, 224),
    tile_info(32, 32, 0, 0, 288, 192, 320, 224),
    tile_info(32, 32, 0, 0, 320, 192, 352, 224),
    tile_info(32, 32, 0, 0, 352, 192, 384, 224),
    tile_info(32, 32, 0, 0, 384, 192, 416, 224),
    tile_info(32, 32, 0, 0, 416, 192, 448, 224),
    tile_info(32, 32, 0, 0, 448, 192, 480, 224),
    tile_info(32, 32, 0, 0, 480, 192, 512, 224),
    tile_info(32, 32, 0, 0, 512, 192, 544, 224),
    tile_info(32, 32, 0, 0, 544, 192, 576, 224),
    tile_info(32, 32, 0, 0, 576, 192, 608, 224),
    tile_info(32, 32, 0, 0, 608, 192, 640, 224),
    tile_info(32, 32, 0, 0, 640, 192, 672, 224),
    tile_info(32, 32, 0, 0, 672, 192, 704, 224),
    tile_info(32, 32, 0, 0, 704, 192, 736, 224),
    tile_info(32, 32, 0, 0, 736, 192, 768, 224),
    tile_info(32, 32, 0, 0, 768, 192, 800, 224),
    tile_info(32, 32, 0, 0, 800, 192, 832, 224),
    tile_info(32, 32, 0, 0, 832, 192, 864, 224),
    tile_info(32, 32, 0, 0, 864, 192, 896, 224),
    tile_info(32, 32, 0, 0, 896, 192, 928, 224),
    tile_info(32, 32, 0, 0, 928, 192, 960, 224),
    tile_info(32, 32, 0, 0, 960, 192, 992, 224),
    tile_info(32, 32, 0, 0, 992, 192, 1024, 224),
    tile_info(32, 32, 0, 0, 0, 224, 32, 256),
    tile_info(32, 32, 0, 0, 32, 224, 64, 256),
    tile_info(32, 32, 0, 0, 64, 224, 96, 256),
    tile_info(32, 32, 0, 0, 96, 224, 128, 256),
    tile_info(32, 32, 0, 0, 128, 224, 160, 256),
    tile_info(32, 32, 0, 0, 160, 224, 192, 256),
    tile_info(32, 32, 0, 0, 192, 224, 224, 256),
    tile_info(32, 32, 0, 0, 224, 224, 256, 256),
    tile_info(32, 32, 0, 0, 256, 224, 288, 256),
    tile_info(32, 32, 0, 0, 288, 224, 320, 256),
    tile_info(32, 32, 0, 0, 320, 224, 352, 256),
    tile_info(32, 32, 0, 0, 352, 224, 384, 256),
    tile_info(32, 32, 0, 0, 384, 224, 416, 256),
    tile_info(32, 32, 0, 0, 416, 224, 448, 256),
    tile_info(32, 32, 0, 0, 448, 224, 480, 256),
    tile_info(32, 32, 0, 0, 480, 224, 512, 256),
    tile_info(32, 32, 0, 0, 512, 224, 544, 256),
    tile_info(32, 32, 0, 0, 544, 224, 576, 256),
    tile_info(32, 32, 0, 0, 576, 224, 608, 256),
    tile_info(32, 32, 0, 0, 608, 224, 640, 256),
    tile_info(32, 32, 0, 0, 640, 224, 672, 256),
    tile_info(32, 32, 0, 0, 672, 224, 704, 256),
    tile_info(32, 32, 0, 0, 704, 224, 736, 256),
    tile_info(32, 32, 0, 0, 736, 224, 768, 256),
    tile_info(32, 32, 0, 0, 768, 224, 800, 256),
    tile_info(32, 32, 0, 0, 800, 224, 832, 256),
    tile_info(32, 32, 0, 0, 832, 224, 864, 256),
    tile_info(32, 32, 0, 0, 864, 224, 896, 256),
    tile_info(32, 32, 0, 0, 896, 224, 928, 256),
    tile_info(32, 32, 0, 0, 928, 224, 960, 256),
    tile_info(32, 32, 0, 0, 960, 224, 992, 256),
    tile_info(32, 32, 0, 0, 992, 224, 1024, 256),
    tile_info(32, 32, 0, 0, 0, 256, 32, 288),
    tile_info(32, 32, 0, 0, 32, 256, 64, 288),
    tile_info(32, 32, 0, 0, 64, 256, 96, 288),
    tile_info(32, 32, 0, 0, 96, 256, 128, 288),
    tile_info(32, 32, 0, 0, 128, 256, 160, 288),
    tile_info(32, 32, 0, 0, 160, 256, 192, 288),
    tile_info(32, 32, 0, 0, 192, 256, 224, 288),
    tile_info(32, 32, 0, 0, 224, 256, 256, 288),
    tile_info(32, 32, 0, 0, 256, 256, 288, 288),
    tile_info(32, 32, 0, 0, 288, 256, 320, 288),
    tile_info(32, 32, 0, 0, 320, 256, 352, 288),
    tile_info(32, 32, 0, 0, 352, 256, 384, 288),
    tile_info(32, 32, 0, 0, 384, 256, 416, 288),
    tile_info(32, 32, 0, 0, 416, 256, 448, 288),
    tile_info(32, 32, 0, 0, 448, 256, 480, 288),
    tile_info(32, 32, 0, 0, 480, 256, 512, 288),
    tile_info(32, 32, 0, 0, 512, 256, 544, 288),
    tile_info(32, 32, 0, 0, 544, 256, 576, 288),
    tile_info(32, 32, 0, 0, 576, 256, 608, 288),
    tile_info(32, 32, 0, 0, 608, 256, 640, 288),
    tile_info(32, 32, 0, 0, 640, 256, 672, 288),
    tile_info(32, 32, 0, 0, 672, 256, 704, 288),
    tile_info(32, 32, 0, 0, 704, 256, 736, 288),
    tile_info(32, 32, 0, 0, 736, 256, 768, 288),
    tile_info(32, 32, 0, 0, 768, 256, 800, 288),
    tile_info(32, 32, 0, 0, 800, 256, 832, 288),
    tile_info(32, 32, 0, 0, 832, 256, 864, 288),
    tile_info(32, 32, 0, 0, 864, 256, 896, 288),
    tile_info(32, 32, 0, 0, 896, 256, 928, 288),
    tile_info(32, 32, 0, 0, 928, 256, 960, 288),
    tile_info(32, 32, 0, 0, 960, 256, 992, 288),
    tile_info(32, 32, 0, 0, 992, 256, 1024, 288),
    tile_info(32, 32, 0, 0, 0, 288, 32, 320),
    tile_info(32, 32, 0, 0, 32, 288, 64, 320),
    tile_info(32, 32, 0, 0, 64, 288, 96, 320),
    tile_info(32, 32, 0, 0, 96, 288, 128, 320),
    tile_info(32, 32, 0, 0, 128, 288, 160, 320),
    tile_info(32, 32, 0, 0, 160, 288, 192, 320),
    tile_info(32, 32, 0, 0, 192, 288, 224, 320),
    tile_info(32, 32, 0, 0, 224, 288, 256, 320),
    tile_info(32, 32, 0, 0, 256, 288, 288, 320),
    tile_info(32, 32, 0, 0, 288, 288, 320, 320),
    tile_info(32, 32, 0, 0, 320, 288, 352, 320),
    tile_info(32, 32, 0, 0, 352, 288, 384, 320),
    tile_info(32, 32, 0, 0, 384, 288, 416, 320),
    tile_info(32, 32, 0, 0, 416, 288, 448, 320),
    tile_info(32, 32, 0, 0, 448, 288, 480, 320),
    tile_info(32, 32, 0, 0, 480, 288, 512, 320),
    tile_info(32, 32, 0, 0, 512, 288, 544, 320),
    tile_info(32, 32, 0, 0, 544, 288, 576, 320),
    tile_info(32, 32, 0, 0, 576, 288, 608, 320),
    tile_info(32, 32, 0, 0, 608, 288, 640, 320),
    tile_info(32, 32, 0, 0, 640, 288, 672, 320),
    tile_info(32, 32, 0, 0, 672, 288, 704, 320),
    tile_info(32, 32, 0, 0, 704, 288, 736, 320),
    tile_info(32, 32, 0, 0, 736, 288, 768, 320),
    tile_info(32, 32, 0, 0, 768, 288, 800, 320),
    tile_info(32, 32, 0, 0, 800, 288, 832, 320),
    tile_info(32, 32, 0, 0, 832, 288, 864, 320),
    tile_info(32, 32, 0, 0, 864, 288, 896, 320),
    tile_info(32, 32, 0, 0, 896, 288, 928, 320),
    tile_info(32, 32, 0, 0, 928, 288, 960, 320),
    tile_info(32, 32, 0, 0, 960, 288, 992, 320),
    tile_info(32, 32, 0, 0, 992, 288, 1024, 320),
    tile_info(32, 32, 0, 0, 0, 320, 32, 352),
    tile_info(32, 32, 0, 0, 32, 320, 64, 352),
    tile_info(32, 32, 0, 0, 64, 320, 96, 352),
    tile_info(32, 32, 0, 0, 96, 320, 128, 352),
    tile_info(32, 32, 0, 0, 128, 320, 160, 352),
    tile_info(32, 32, 0, 0, 160, 320, 192, 352),
    tile_info(32, 32, 0, 0, 192, 320, 224, 352),
    tile_info(32, 32, 0, 0, 224, 320, 256, 352),
    tile_info(32, 32, 0, 0, 256, 320, 288, 352),
    tile_info(32, 32, 0, 0, 288, 320, 320, 352),
    tile_info(32, 32, 0, 0, 320, 320, 352, 352),
    tile_info(32, 32, 0, 0, 352, 320, 384, 352),
    tile_info(32, 32, 0, 0, 384, 320, 416, 352),
    tile_info(32, 32, 0, 0, 416, 320, 448, 352),
    tile_info(32, 32, 0, 0, 448, 320, 480, 352),
    tile_info(32, 32, 0, 0, 480, 320, 512, 352),
    tile_info(32, 32, 0, 0, 512, 320, 544, 352),
    tile_info(32, 32, 0, 0, 544, 320, 576, 352),
    tile_info(32, 32, 0, 0, 576, 320, 608, 352),
    tile_info(32, 32, 0, 0, 608, 320, 640, 352),
    tile_info(32, 32, 0, 0, 640, 320, 672, 352),
    tile_info(32, 32, 0, 0, 672, 320, 704, 352),
    tile_info(32, 32, 0, 0, 704, 320, 736, 352),
    tile_info(32, 32, 0, 0, 736, 320, 768, 352),
    tile_info(32, 32, 0, 0, 768, 320, 800, 352),
    tile_info(32, 32, 0, 0, 800, 320, 832, 352),
    tile_info(32, 32, 0, 0, 832, 320, 864, 352),
    tile_info(32, 32, 0, 0, 864, 320, 896, 352),
    tile_info(32, 32, 0, 0, 896, 320, 928, 352),
    tile_info(32, 32, 0, 0, 928, 320, 960, 352),
    tile_info(32, 32, 0, 0, 960, 320, 992, 352),
    tile_info(32, 32, 0, 0, 992, 320, 1024, 352),
    tile_info(32, 32, 0, 0, 0, 352, 32, 384),
    tile_info(32, 32, 0, 0, 32, 352, 64, 384),
    tile_info(32, 32, 0, 0, 64, 352, 96, 384),
    tile_info(32, 32, 0, 0, 96, 352, 128, 384),
    tile_info(32, 32, 0, 0, 128, 352, 160, 384),
    tile_info(32, 32, 0, 0, 160, 352, 192, 384),
    tile_info(32, 32, 0, 0, 192, 352, 224, 384),
    tile_info(32, 32, 0, 0, 224, 352, 256, 384),
    tile_info(32, 32, 0, 0, 256, 352, 288, 384),
    tile_info(32, 32, 0, 0, 288, 352, 320, 384),
    tile_info(32, 32, 0, 0, 320, 352, 352, 384),
    tile_info(32, 32, 0, 0, 352, 352, 384, 384),
    tile_info(32, 32, 0, 0, 384, 352, 416, 384),
    tile_info(32, 32, 0, 0, 416, 352, 448, 384),
    tile_info(32, 32, 0, 0, 448, 352, 480, 384),
    tile_info(32, 32, 0, 0, 480, 352, 512, 384),
    tile_info(32, 32, 0, 0, 512, 352, 544, 384),
    tile_info(32, 32, 0, 0, 544, 352, 576, 384),
    tile_info(32, 32, 0, 0, 576, 352, 608, 384),
    tile_info(32, 32, 0, 0, 608, 352, 640, 384),
    tile_info(32, 32, 0, 0, 640, 352, 672, 384),
    tile_info(32, 32, 0, 0, 672, 352, 704, 384),
    tile_info(32, 32, 0, 0, 704, 352, 736, 384),
    tile_info(32, 32, 0, 0, 736, 352, 768, 384),
    tile_info(32, 32, 0, 0, 768, 352, 800, 384),
    tile_info(32, 32, 0, 0, 800, 352, 832, 384),
    tile_info(32, 32, 0, 0, 832, 352, 864, 384),
    tile_info(32, 32, 0, 0, 864, 352, 896, 384),
    tile_info(32, 32, 0, 0, 896, 352, 928, 384),
    tile_info(32, 32, 0, 0, 928, 352, 960, 384),
    tile_info(32, 32, 0, 0, 960, 352, 992, 384),
    tile_info(32, 32, 0, 0, 992, 352, 1024, 384),
    tile_info(32, 32, 0, 0, 0, 384, 32, 416),
    tile_info(32, 32, 1, 0, 32, 384, 63, 416),
    tile_info(32, 32, 0, 0, 63, 384, 95, 416),
    tile_info(32, 32, 1, 1, 95, 384, 126, 415),
    tile_info(32, 32, 0, 1, 126, 384, 158, 415),
    tile_info(32, 32, 0, 1, 158, 384, 190, 415),
    tile_info(32, 32, 0, 0, 190, 384, 222, 416),
    tile_info(32, 32, 0, 0, 222, 384, 254, 416),
    tile_info(32, 32, 0, 0, 254, 384, 286, 416),
    tile_info(32, 32, 0, 0, 286, 384, 318, 416),
    tile_info(32, 32, 0, 0, 318, 384, 350, 416),
    tile_info(32, 32, 0, 0, 350, 384, 382, 416),
    tile_info(32, 32, 0, 0, 382, 384, 414, 416),
    tile_info(32, 32, 0, 0, 414, 384, 446, 416),
    tile_info(32, 32, 0, 0, 446, 384, 478, 416),
    tile_info(32, 32, 0, 0, 478, 384, 510, 416),
    tile_info(32, 32, 0, 0, 510, 384, 542, 416),
    tile_info(32, 32, 0, 0, 542, 384, 574, 416),
    tile_info(32, 32, 0, 0, 574, 384, 606, 416),
    tile_info(32, 32, 1, 0, 606, 384, 637, 416),
    tile_info(32, 32, 0, 0, 637, 384, 669, 416),
    tile_info(32, 32, 0, 1, 669, 384, 701, 415),
    tile_info(32, 32, 0, 0, 701, 384, 733, 416),
    tile_info(32, 32, 0, 0, 733, 384, 765, 416),
    tile_info(32, 32, 1, 0, 765, 384, 796, 416),
    tile_info(32, 32, 0, 0, 796, 384, 828, 416),
    tile_info(32, 32, 1, 0, 828, 384, 859, 416),
    tile_info(32, 32, 0, 0, 859, 384, 891, 416),
    tile_info(32, 32, 0, 0, 891, 384, 923, 416),
    tile_info(32, 32, 1, 0, 923, 384, 954, 416),
    tile_info(32, 32, 0, 1, 954, 384, 986, 415),
    tile_info(32, 32, 0, 0, 986, 384, 1018, 416),
};

tile_info &tile_floor_info(tileidx_t idx)
{
    assert(idx >= 0 && idx < TILE_FLOOR_MAX);
    return _tile_floor_info[idx - 0];
}


typedef std::pair<const char*, tileidx_t> _name_pair;

_name_pair floor_name_pairs[] =
{
    _name_pair("dngn_error", 1 + 0),
    _name_pair("dngn_unseen", 0 + 0),
    _name_pair("floor_cobble_blood", 272 + 0),
    _name_pair("floor_crystal_squares", 307 + 0),
    _name_pair("floor_dirt", 362 + 0),
    _name_pair("floor_grass", 313 + 0),
    _name_pair("floor_grass_dirt_mix", 334 + 0),
    _name_pair("floor_grey_dirt", 2 + 0),
    _name_pair("floor_hall", 145 + 0),
    _name_pair("floor_hive", 149 + 0),
    _name_pair("floor_ice", 153 + 0),
    _name_pair("floor_lair", 157 + 0),
    _name_pair("floor_limestone", 375 + 0),
    _name_pair("floor_marble", 284 + 0),
    _name_pair("floor_moss", 173 + 0),
    _name_pair("floor_nerves", 337 + 0),
    _name_pair("floor_normal", 2 + 0),
    _name_pair("floor_orc", 149 + 0),
    _name_pair("floor_pebble", 10 + 0),
    _name_pair("floor_pebble_blue", 28 + 0),
    _name_pair("floor_pebble_brown", 19 + 0),
    _name_pair("floor_pebble_cyan", 46 + 0),
    _name_pair("floor_pebble_darkgray", 73 + 0),
    _name_pair("floor_pebble_green", 37 + 0),
    _name_pair("floor_pebble_lightblue", 82 + 0),
    _name_pair("floor_pebble_lightcyan", 100 + 0),
    _name_pair("floor_pebble_lightgray", 10 + 0),
    _name_pair("floor_pebble_lightgreen", 91 + 0),
    _name_pair("floor_pebble_lightmagenta", 118 + 0),
    _name_pair("floor_pebble_lightred", 109 + 0),
    _name_pair("floor_pebble_magenta", 64 + 0),
    _name_pair("floor_pebble_red", 55 + 0),
    _name_pair("floor_pebble_white", 136 + 0),
    _name_pair("floor_pebble_yellow", 127 + 0),
    _name_pair("floor_rough", 204 + 0),
    _name_pair("floor_rough_blue", 208 + 0),
    _name_pair("floor_rough_brown", 224 + 0),
    _name_pair("floor_rough_cyan", 216 + 0),
    _name_pair("floor_rough_darkgray", 232 + 0),
    _name_pair("floor_rough_green", 212 + 0),
    _name_pair("floor_rough_lightblue", 236 + 0),
    _name_pair("floor_rough_lightcyan", 244 + 0),
    _name_pair("floor_rough_lightgray", 228 + 0),
    _name_pair("floor_rough_lightgreen", 240 + 0),
    _name_pair("floor_rough_lightmagenta", 252 + 0),
    _name_pair("floor_rough_lightred", 248 + 0),
    _name_pair("floor_rough_magenta", 220 + 0),
    _name_pair("floor_rough_red", 204 + 0),
    _name_pair("floor_rough_white", 260 + 0),
    _name_pair("floor_rough_yellow", 256 + 0),
    _name_pair("floor_sand_stone", 264 + 0),
    _name_pair("floor_sandstone", 290 + 0),
    _name_pair("floor_slime", 177 + 0),
    _name_pair("floor_snake", 181 + 0),
    _name_pair("floor_swamp", 185 + 0),
    _name_pair("floor_tomb", 189 + 0),
    _name_pair("floor_vault", 193 + 0),
    _name_pair("floor_vines", 197 + 0),
    _name_pair("floor_volcanic", 300 + 0),
    _name_pair("halo_dirt", 365 + 0),
    _name_pair("halo_grass", 325 + 0),
    _name_pair("halo_grass2", 344 + 0),
    _name_pair("halo_vault", 353 + 0),
    _name_pair("sigil_algiz_left", 402 + 0),
    _name_pair("sigil_algiz_right", 403 + 0),
    _name_pair("sigil_circle", 394 + 0),
    _name_pair("sigil_cross", 393 + 0),
    _name_pair("sigil_curve_n_e", 385 + 0),
    _name_pair("sigil_curve_n_w", 386 + 0),
    _name_pair("sigil_curve_s_e", 387 + 0),
    _name_pair("sigil_curve_s_w", 388 + 0),
    _name_pair("sigil_fourway", 412 + 0),
    _name_pair("sigil_rhombus", 395 + 0),
    _name_pair("sigil_sharp_e_ne", 413 + 0),
    _name_pair("sigil_sharp_w_sw", 414 + 0),
    _name_pair("sigil_straight_e_ne_sw", 415 + 0),
    _name_pair("sigil_straight_e_nw", 404 + 0),
    _name_pair("sigil_straight_e_sw", 405 + 0),
    _name_pair("sigil_straight_e_w", 389 + 0),
    _name_pair("sigil_straight_n_s", 390 + 0),
    _name_pair("sigil_straight_n_se", 408 + 0),
    _name_pair("sigil_straight_n_sw", 409 + 0),
    _name_pair("sigil_straight_ne_sw", 391 + 0),
    _name_pair("sigil_straight_nw_se", 392 + 0),
    _name_pair("sigil_straight_s_ne", 410 + 0),
    _name_pair("sigil_straight_s_nw", 411 + 0),
    _name_pair("sigil_straight_w_ne", 406 + 0),
    _name_pair("sigil_straight_w_se", 407 + 0),
    _name_pair("sigil_y", 396 + 0),
    _name_pair("sigil_y_inverted", 397 + 0),
    _name_pair("sigil_y_left", 399 + 0),
    _name_pair("sigil_y_leftleaning", 400 + 0),
    _name_pair("sigil_y_right", 398 + 0),
    _name_pair("sigil_y_rightleaning", 401 + 0),
    _name_pair("tutorial_pad", 374 + 0),
};

bool tile_floor_index(const char *str, tileidx_t *idx)
{
    assert(str);
    if (!str)
        return false;

    string lc = str;
    for (unsigned int i = 0; i < lc.size(); i++)
        lc[i] = tolower(lc[i]);

    int num_pairs = sizeof(floor_name_pairs) / sizeof(floor_name_pairs[0]);
    bool result = binary_search<const char *, tileidx_t>(
       lc.c_str(), &floor_name_pairs[0], num_pairs, &strcmp, idx);
    return (result);
}

bool tile_floor_equal(tileidx_t tile, tileidx_t idx)
{
    assert(tile >= 0 && tile < TILE_FLOOR_MAX);
    return (idx >= tile && idx < tile + tile_floor_count(tile));
}


typedef std::pair<tile_variation, tileidx_t> _colour_pair;

_colour_pair floor_colour_pairs[] =
{
    _colour_pair(tile_variation(0, 0), 0),
    _colour_pair(tile_variation(10 + 0, 1), 28 + 0),
    _colour_pair(tile_variation(10 + 0, 2), 37 + 0),
    _colour_pair(tile_variation(10 + 0, 3), 46 + 0),
    _colour_pair(tile_variation(10 + 0, 4), 55 + 0),
    _colour_pair(tile_variation(10 + 0, 5), 64 + 0),
    _colour_pair(tile_variation(10 + 0, 6), 19 + 0),
    _colour_pair(tile_variation(10 + 0, 8), 73 + 0),
    _colour_pair(tile_variation(10 + 0, 9), 82 + 0),
    _colour_pair(tile_variation(10 + 0, 10), 91 + 0),
    _colour_pair(tile_variation(10 + 0, 11), 100 + 0),
    _colour_pair(tile_variation(10 + 0, 12), 109 + 0),
    _colour_pair(tile_variation(10 + 0, 13), 118 + 0),
    _colour_pair(tile_variation(10 + 0, 14), 127 + 0),
    _colour_pair(tile_variation(10 + 0, 15), 136 + 0),
    _colour_pair(tile_variation(204 + 0, 1), 208 + 0),
    _colour_pair(tile_variation(204 + 0, 2), 212 + 0),
    _colour_pair(tile_variation(204 + 0, 3), 216 + 0),
    _colour_pair(tile_variation(204 + 0, 5), 220 + 0),
    _colour_pair(tile_variation(204 + 0, 6), 224 + 0),
    _colour_pair(tile_variation(204 + 0, 7), 228 + 0),
    _colour_pair(tile_variation(204 + 0, 8), 232 + 0),
    _colour_pair(tile_variation(204 + 0, 9), 236 + 0),
    _colour_pair(tile_variation(204 + 0, 10), 240 + 0),
    _colour_pair(tile_variation(204 + 0, 11), 244 + 0),
    _colour_pair(tile_variation(204 + 0, 12), 248 + 0),
    _colour_pair(tile_variation(204 + 0, 13), 252 + 0),
    _colour_pair(tile_variation(204 + 0, 14), 256 + 0),
    _colour_pair(tile_variation(204 + 0, 15), 260 + 0),
};

tileidx_t tile_floor_coloured(tileidx_t idx, int col)
{
    int num_pairs = sizeof(floor_colour_pairs) / sizeof(floor_colour_pairs[0]);
    tile_variation key(idx, col);
    tileidx_t found;
    bool result = binary_search<tile_variation, tileidx_t>(
       key, &floor_colour_pairs[0], num_pairs,
       &tile_variation::cmp, &found);
    return (result ? found : idx);
}

