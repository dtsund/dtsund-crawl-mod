#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1209] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,   85,   82,   83,
       84,   78,   85,   85,   76,   79,   85,   80,   77,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   82,   34,   36,   85,   85,
       85,   85,   85,   85,   85,   86,    6,   86,   86,    4,
        2,    3,   86,    2,    2,    2,    2,    9,   10,   86,
        9,    9,   86,   12,   86,   32,   82,   33,   84,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   32,   32,   82,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   85,   28,   23,   28,   78,   85,
       85,   27,   79,   85,   80,   77,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   28,   34,   36,   85,   85,   85,   85,
       85,   85,   85,   15,   16,   84,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   85,   13,   15,   13,   13,   13,
       13,   13,   13,   86,   21,   22,   86,   20,   86,   82,
       83,    0,   81,    0,   80,   80,   80,   80,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   82,   34,   36,    0,    0,    0,
        0,    0,   34,    0,    0,    0,    0,    0,    0,    0,
        0,   39,    6,    5,    0,    0,    2,    3,    2,    0,
        2,    2,    2,    2,    9,    9,   10,    9,    9,    9,
        0,   11,    0,   12,   31,    0,   31,   82,   33,    0,
        0,   33,   31,    0,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,    0,   30,   31,   82,
       31,   34,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   26,    0,   26,   28,   23,   28,    0,   23,
       26,    0,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,    0,   25,    0,   26,   28,   26,
       34,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   15,   16,    0,    0,    0,   16,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,    0,   14,   13,   15,   13,
       13,   13,   13,   13,   13,   13,   13,   19,    0,   19,
       21,   22,    0,    0,    0,    0,   18,    0,   80,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    2,    9,    9,    9,    7,
        0,    0,   29,    0,    0,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   34,   31,   31,   31,   31,
       31,   31,   31,    0,   24,    0,    0,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   34,   34,   26,
       26,   26,   26,   26,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   35,    0,    0,
        0,    0,    0,    0,    2,    9,    8,    0,    9,    7,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,    0,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,    0,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,   45,    0,    0,   67,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   66,
       43,    0,    0,    0,    0,    0,    0,    0,   52,   64,
        0,    0,    0,    0,   38,    0,    0,    0,    0,    2,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    0,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,    0,    0,    0,   46,    0,   62,   70,   71,
       73,   72,   74,    0,    0,    0,    0,    0,    0,    0,
       48,   63,    0,   55,    0,    0,    0,    0,    0,    0,
        0,   41,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   54,   50,   57,    0,   53,    0,    0,    0,
        0,   68,   56,   47,    0,    0,   51,    0,    0,    0,
        0,    0,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   65,    0,    0,    0,    0,
       69,    0,   49,    0,    0,    0,    0,    0,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,    0,   31,
       31,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,    0,   26,   26,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,   59,    0,   75,    0,    0,    0,
       37,    0,    0,   31,   31,   31,   31,   31,   31,    0,
       31,   31,    0,   31,   26,   26,   26,   26,   26,   26,
        0,   26,   26,    0,   26,   13,   13,   13,   13,   58,
        0,   61,    0,   42,   40,   31,   31,   31,   31,   31,
       31,   26,   26,   26,   26,   26,   26,   13,   13,   60,
        0,   31,   31,   26,   26,   13,    0,   31,   26,   13,

        0,   31,   26,   13,   44,   31,   26,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   25,
        1,   38,    1,    1,   25,    1,   39,   25,   25,   40,

       41,   42,   43,   44,   45,   25,   25,   46,   25,   25,
       47,   48,   25,   49,   50,   51,   52,   53,   25,   25,
       25,   25,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1229] =
    {   0,
        0,   54,   58,   68,   62,   64,   54,   72,  119,  173,
      227,  281,  335,  389,   75,  178, 3567, 4084,   79, 4084,
     3561, 4084, 3552,   76, 4084,   78, 3544,   80, 4084, 3535,
       73, 3526,   64, 3488,  163,   78,   67,  160, 3485, 3485,
     3477,  162,   85, 3483, 3460,  442,    0, 4084,  170, 3449,
     3441, 3430,  149,  151, 3419, 4084, 4084, 3468,  199, 4084,
        0, 4084, 3465,  203,    0, 3429,   65, 3395, 4084, 3442,
       56, 3366,  192, 4084, 3401,  286,  290, 4084,  295,  394,
      398,  407,  411,  420,  424,  451,  464,  470,  474,  480,
      501,  509,  517,  521,  528,  547,  532,  552,  563,  569,

      579,  573,  584,  594,  610,  604,  614,  621,  625,  629,
      634,  641,  651,  656,  403,  673, 4084,  682,  449,  691,
      693, 4084,  699,  703,  713,  567,  619,  717,  642,  719,
      728,  743,  744,  754,  756,  758,  773,  775,  781,  783,
      730,  820,  793,  824,  801,  812,  830,  813,  828,  835,
      836,  840,  847,  851, 4084,  867,  196,  198, 3385,  204,
      288,  200,  289,  271,  439,  293,  291,  297,  276,  290,
      380,  458,  485,  202,  888,  405,  892,  464,  272,  379,
      410,  479,  658,  897,  904, 4084,  908, 4084,  912,  314,
     4084, 3380, 4084, 3374,  502, 3373, 3370,  514, 3351, 3358,

     3343,  529, 3345, 3336, 3334, 3333, 3316,  501, 3317, 3317,
     3308, 3305, 3304, 3298, 3290, 3297, 3294, 3276, 3264, 3275,
     3263, 3256,  567, 3230,    0,    0, 4084, 3209, 3204, 3206,
      561, 3195,    0,  618, 3200, 3205, 3198, 3221,  369, 3187,
     3171, 4084, 4084, 4084, 3218,  661,    0, 4084,    0, 3214,
      872, 3193, 3176,  390, 3128, 3123, 4084,  351, 3122,  916,
      735, 4084, 3170, 4084,  920,  924,  929,  934, 4084,  949,
      961, 4084,  939,  971,  955,  979,  987,  992,  998, 1006,
     1014, 1019, 1027, 1033, 1037, 1043, 1049, 1054, 1062, 1074,
     1081, 1086, 1094, 1099, 1111, 1118, 1123, 1129, 1134, 1150,

     1155, 1140, 1166, 1172, 1180, 1185, 1193, 4084, 1197,    0,
     1209, 1215, 1222, 1232, 1228, 1236, 1240, 1246, 1252, 1263,
     1267, 1281, 1002, 1067, 1289, 1293, 4084, 1308, 1312, 4084,
     1250, 1319, 1112, 1330, 1244, 1324, 1338, 1340, 1342, 1298,
     1348, 1346, 1356, 1361, 1367, 1365, 1372, 1377, 1388, 1393,
     1395, 1404, 1411, 1412, 1418, 1419, 1427, 1442, 1435, 1425,
     1450, 1459, 1464, 1466, 1472, 4084, 1480, 1484,    0, 1434,
     1490, 1503, 1498, 1494, 1507, 1511, 1515, 1516, 1522, 1532,
     1533, 1553, 4084, 1559, 1570, 1538, 4084, 3149,  730,  788,
      641,  712,  661,  703,  823,   92,  927,  936,  486, 1064,

      741,  696,  302,  778,  834,  533,  852,  437,  887,  690,
      869,  780,  835,  942, 1082, 1575, 4084,  628,    0,  982,
      537,  185,  957, 1094, 1113,  774,  910, 1546, 1580, 1584,
     1590, 4084, 1596, 1600, 1604, 1608, 4084, 1612, 3142, 3138,
     3123, 3121, 3114, 3118, 3103, 3094, 3092, 3103, 3097, 3075,
     3078, 3062,  969, 3069, 3060, 3040, 3049, 3050, 3039, 3039,
     3024, 3022, 1129, 3004, 3015, 3010, 3013, 2987, 1621, 2976,
     1625, 2974, 2983, 2968, 2963, 2971, 1633, 1645, 1649, 4084,
     1653, 1657, 4084, 1661, 1665, 1671, 1676, 1682, 1689, 1694,
     1703, 1711, 1720, 1729, 1734, 1740, 1639, 1750, 1757, 1761,

     1766, 1771, 1778, 1788, 1796, 1801, 1810, 1815, 1820, 1827,
     1831, 1841, 1845, 1850, 1868, 1872, 1882, 1876, 1887, 1891,
     1895, 1900, 1911, 1948, 4084, 1952, 1957, 1925, 1896, 1906,
     1751, 1938, 1962, 1968, 1969, 1973, 1977, 1979, 1983, 1985,
     1989, 2008, 2007, 2003, 2026, 2028, 2030, 2032, 2037, 2038,
     2048, 2049, 2055, 2069, 2056, 2078, 2079, 2095, 2099, 2106,
     2090, 2110, 2117, 2118, 2122, 2124, 1187,  854,  739, 1021,
      961, 1002, 1178,  831, 1263, 1133, 1173, 1020, 1274, 1710,
     1071,  460, 1195, 1160,  973, 1202, 1117, 1216,  607, 1794,
     1375, 1286, 1080, 1203, 1310, 2137,  932, 2130, 1135, 1276,

     1362,  563, 2149, 4084, 2170, 2969, 2968, 2950, 2940, 2947,
     2935, 2931, 2919, 2883, 2888, 2883, 2872, 2870, 2874, 2859,
     2859, 2841, 2840, 2836, 2812, 2786, 2786, 2785, 2774, 2756,
     2770, 2765, 2755, 2739, 2725, 2702, 2174, 4084, 2703, 2129,
     2693, 2690, 2698, 2156, 2719, 2186, 4084, 2190, 2194, 4084,
     2198, 2202, 2207, 2212, 2216, 2227, 2231, 2253, 2257, 2262,
     2266, 2272, 2276, 2280, 2284, 2297, 2303, 2311, 2288, 2315,
     2319, 2332, 2338, 2342, 2346, 2361, 2367, 2373, 2377, 2385,
     2389, 2396, 2426, 2402, 2408, 2412, 2416, 2420, 2431, 2241,
     2437, 2436, 2442, 2468, 2454, 2476, 2482, 2477, 2484, 2493,

     2488, 2486, 2503, 2497, 2502, 2498, 2508, 2527, 2528, 2542,
     2532, 2543, 2548, 2549, 2557, 2553, 2562, 2555, 2574, 2570,
     2594, 2580, 2587, 2600, 2601, 2605, 2609, 1406, 1347, 1435,
      875, 1307, 1440, 1619, 1510, 1485, 1537, 1370, 1534, 1502,
     1465, 1577, 1607, 1669, 1606, 1616, 1677, 1688, 1717, 1824,
     1730, 1684, 1843, 1733, 1781, 1389, 1699, 1009, 1388, 1805,
     1556, 2221, 2696, 2700, 2684, 2698, 4084, 2682, 2689, 4084,
     2685, 2679, 2674, 2669, 2664, 2642, 2639, 1751, 2632, 4084,
     4084, 2626, 2622, 2636, 2621, 2603, 2605, 2584, 4084, 4084,
     2575, 2573, 2548, 2506, 4084, 2503, 2499, 2611, 2462, 2478,

     2619, 2624, 2629, 2644, 2664, 2668, 2672, 2676, 2681, 2688,
     2693, 2707, 2713, 2719, 2728, 2735, 2739, 2744, 2754, 2759,
     2770, 2763, 2779, 2783, 2794, 2798, 2809, 2814, 2820, 2825,
     2833, 2837, 2844, 2855, 2860, 2864, 2868, 2774, 2872, 2818,
     2829, 2838, 2881, 2876, 2882, 2892, 2898, 2906, 2910, 2922,
     2921, 2926, 2927, 2936, 2937, 2938, 2944, 2945, 2951, 2965,
     2950, 2979, 2967, 2985, 2990, 2991, 2996, 2995, 3002, 3004,
     3006, 3010, 3014, 3016, 1838, 1904, 1670, 1825, 1751, 1906,
     1933, 1989, 2005, 2064, 2132, 1849, 1877, 2112, 1910, 1789,
     1964, 2144, 2153, 1905, 2167, 1546, 2152, 2077, 1890,  497,

     2009, 1632, 2486, 2462, 2457, 4084, 2423, 4084, 4084, 4084,
     4084, 4084, 4084, 2437, 1913, 2421, 2402, 2382, 2371, 2370,
     4084, 4084, 2354, 4084, 2341, 2349, 2335, 2287, 2235, 2215,
     2200, 4084, 2200, 3051, 3056, 3060, 3034, 3072, 3076, 3080,
     3086, 3091, 3095, 3099, 3107, 3121, 3111, 3126, 3138, 3142,
     3156, 3130, 3161, 3165, 3170, 3177, 3182, 3186, 3191, 3196,
     3205, 3209, 3214, 3187, 3221, 3225, 3025, 3045, 3100, 3226,
     3230, 3236, 3248, 3249, 3256, 3264, 3265, 3273, 3274, 3275,
     3286, 3279, 3291, 3302, 3303, 3304, 3313, 3314, 3318, 3325,
     3330, 3334, 3341, 2200, 2215, 2341, 2214, 2430, 2419, 2043,

     2157, 2448, 2575, 2602, 2101, 1956, 2622, 2224, 1952, 1984,
     1853, 2209, 4084, 4084, 4084, 2170, 4084, 2139, 2114, 2110,
     2086, 4084, 4084, 4084, 2076, 2033, 4084, 2011, 1977, 1887,
     2653, 1769, 1781, 3343, 3353, 3357, 3371, 3362, 3378, 3388,
     3392, 3397, 3401, 3409, 3413, 3418, 3423, 3427, 3438, 3432,
     3444, 3450, 3458, 3436, 3462, 3464, 3475, 3470, 3476, 3481,
     3482, 3489, 3487, 3493, 3505, 3513, 3519, 3521, 3527, 3528,
     3532, 3533, 3534, 2627, 2315, 2195, 2225, 2270, 2686, 2299,
     2712, 2050, 2031, 3260, 2319, 4084, 1679, 1613, 1496, 1459,
     4084, 1356, 4084, 1319, 3405, 3539, 1138, 3543, 3545, 3550,

     3558, 3574, 3590, 3596, 3600, 3604, 3609, 3614, 3618, 3622,
     3627, 3579, 3628, 3635, 3639, 3641, 3646, 3648, 3662, 3669,
     3673, 3678, 3680, 3685, 2312, 2346, 2721, 2383, 2776, 2454,
     3686, 3690, 1154, 1120, 4084, 1047, 4084, 1009, 3691,  914,
     4084, 3692,  873, 3700, 3715, 3720, 3726, 3745, 3750, 3755,
     3761, 3765, 3769, 3773, 3746, 3774, 3724, 3780, 3784, 3795,
     3796, 3800, 3808, 3814, 3815, 2813, 2389, 2875, 2543, 4084,
      793, 4084,  731, 4084, 4084, 3824, 3840, 3835, 3854, 3859,
     3870, 3819, 3865, 3846, 3874, 3880, 3881, 2920, 2526, 4084,
      631, 3885, 3889, 3893, 3894, 2637,  383, 3905, 3909, 1264,

      311, 3924, 3919, 2958, 4084, 3931, 3899, 4084, 3969, 3975,
     3981, 3987, 3993, 3999, 4005, 4011, 4017, 4023, 4029, 4035,
     4041, 4047, 4053, 4059, 4065, 4071,  212, 4077
    } ;

static yyconst flex_int16_t yy_def[1229] =
    {   0,
     1208,    1, 1209, 1210, 1211, 1211, 1212, 1212, 1208,    9,
     1208,   11, 1208,   13, 1213, 1213, 1208, 1208, 1208, 1208,
     1208, 1208, 1214, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1215, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1216, 1208,
     1217, 1208, 1208, 1218, 1217, 1217, 1217, 1219, 1208, 1208,
     1219, 1219, 1220, 1208, 1208, 1221, 1208, 1208, 1208, 1221,
     1222, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,

     1221, 1221, 1221, 1221,   46, 1223, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1224, 1208, 1208, 1208, 1224, 1225,
     1224, 1208, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224,   46, 1226, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1208, 1208, 1208, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1208, 1227,   46, 1227, 1227, 1227,
     1227, 1227, 1227, 1228, 1208, 1208, 1208, 1208, 1228, 1208,
     1208, 1214, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208,   46, 1215, 1208, 1208, 1208, 1208,
     1208, 1208, 1215, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1217, 1208, 1217, 1208,
     1217, 1217, 1217, 1217, 1219, 1219, 1208, 1219, 1219, 1219,
     1220, 1208, 1208, 1208, 1221, 1221, 1221, 1208, 1208, 1208,
     1208, 1208, 1222, 1222, 1221, 1222, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1208, 1221,  105,
     1223, 1223, 1223, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1224, 1224, 1224, 1208, 1208, 1208, 1208, 1208,
     1225, 1225, 1224, 1225, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1208, 1208, 1224,  144, 1226,
     1226, 1226, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1208, 1208, 1208, 1208, 1208, 1208, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1208, 1208, 1227,  177, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228, 1228,
     1208, 1208, 1208, 1208, 1208, 1228, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1217, 1219, 1219, 1219, 1208,
     1208, 1221, 1208, 1208, 1222, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1223, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1224, 1208, 1208, 1225, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1226, 1215, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1228, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1217, 1219, 1208, 1208, 1219, 1208,
     1208, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1217,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1217, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1227, 1227, 1227, 1227, 1227, 1227, 1227,

     1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1217, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1227, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1227, 1227, 1227, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1221, 1221,

     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1227, 1227, 1227, 1227, 1227, 1227,
     1227, 1227, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1227, 1227, 1227, 1227, 1208,
     1208, 1208, 1208, 1208, 1208, 1221, 1221, 1221, 1221, 1221,
     1221, 1224, 1224, 1224, 1224, 1224, 1224, 1227, 1227, 1208,
     1208, 1221, 1221, 1224, 1224, 1227, 1208, 1221, 1224, 1227,

     1208, 1221, 1224, 1227, 1208, 1221, 1224,    0, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208
    } ;

static yyconst flex_int16_t yy_nxt[4140] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   18,   24,
       25,   26,   27,   28,   29,   18,   30,   31,   32,   18,
       33,   18,   18,   34,   18,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   18,   18,   44,   18,   18,   45,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   46,   74,   75,   46,   47,
       57,   58,   59,   60,   69,   70,   69,   70,   48,   56,
       62,   63,   64,   65,   74,   75,  185,  186,  187,  185,
      190,   49,  212,  190,  253,  188,  203,   66,  194,  195,
      194,  195,  197,  198,   50,  200,  213,  204,  210,   51,

      221,   52,  201,   53, 1208,  258,   54,   55,  222,  211,
      259,   71,  189,   71,  254,  573,   72,   67,   72,   76,
       77,   78,   79,   77,   76,   80,   81,   76,   82,   83,
       84,   85,   86,   87,   76,   88,   89,   90,   76,   91,
       76,   76,   92,   76,   93,   94,   95,   96,   97,   98,
       99,  100,  101,   76,   76,  102,  103,   76,  104,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,  105,  214,  238,  105,  106,  185,
      186,  187,  185,  206,  219,  234,  207,  107,  188,  240,
      208,  241,  215,  209,  262,  263,  220, 1208,  239,  213,

      108,  243,  245,  246,  244,  248,  250,  251,  194,  389,
      197,  390, 1208,  109, 1208,  189, 1208,  388,  110,  394,
      111,  415,  112,  598,  391,  113,  114,  115,  116,  117,
      118,  116,  115,  119,  120,  115,  121,  122,  123,  124,
      125,  126,  115,  127,  128,  129,  115,  130,  115,  115,
      131,  115,  132,  133,  134,  135,  136,  137,  138,  139,
      140,  115,  115,  141,  142,  115,  143,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  144, 1208, 1208,  144,  145,  266, 1208,  266,
      266,  268,  269,  270,  268,  146,  270,  272,  270,  270,

     1208, 1208, 1208, 1208,  397, 1208,  404,  408,  147, 1208,
      392,  395,  406,  402, 1208,  190,  409,  393,  190,  421,
      405,  148,  396,  267,  403, 1205,  149,  271,  150,  407,
      151,  581,  271,  152,  153,   18,  154,  155,  156,  154,
       18,   22,   23,   18,   24,   25,  157,   27,  158,   29,
      159,  160,  161,  162,  159,  163,  159,  159,  164,  159,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  159,
      159,  174,  175,  159,  176,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,   18,   18,
      177, 1208, 1208,  177,   47,  266,  238,  266,  266,  274,

      258,  266,  274,   48,  324,  259,  275,  324,  266,  253,
      266,  266,  266,  410,  266,  266,  178, 1208,  239,  277,
      278,  266, 1208,  266,  266,  266, 1201,  266,  266,  179,
      422,  267,  277,  278,  180,  276,  181,  279,  182,  254,
      325,  183,   55,  225,  267,  418,  225,  226,  267, 1208,
      324, 1208,  266,  324,  266,  266,  227,  267,  423,  398,
      586,  267,  399,  280,  281,  266,  400,  266,  266,  401,
     1208,  266, 1208,  266,  266,  266, 1208,  266,  266,  420,
      411,  266,  228,  266,  266,  744,  325,  229,  267,  230,
      282, 1208,  412,  405,  231,  232,  283, 1208, 1208,  285,

      413,  267,  266,  284,  266,  266,  424,  267,  414, 1208,
      266,  267,  266,  266,  197,  198,  450,  267,  266,  576,
      266,  266,  266,  286,  266,  266,  197,  198,  425,  266,
      451,  266,  266,  266,  287,  266,  266,  289,  267, 1010,
      290,  293,  288,  295,  291, 1208,  267,  292,  266, 1208,
      266,  266,  294,  266,  267,  266,  266,  296,  267,  443,
      584,  444,  297,  299,  266,  267,  266,  266,  324,  267,
      266,  324,  266,  266,  266, 1208,  266,  266,  300,  298,
      266,  597,  266,  266,  267,  307,  308,  307,  307,  267,
      466,  302,  306,  467,  304,  266,  301,  266,  266,  240,

      267,  241,  305,  303,  325,  312,  267,  312,  312,  762,
      267,  310,  269,  270,  310,  266,  267,  266,  266, 1208,
      324,  267,  266,  324,  266,  266,  266,  751,  266,  266,
      266,  267,  266,  266,  309,  266,  314,  266,  266,  340,
     1208,  313,  266,  324,  266,  266,  324,  271,  469,  455,
      296,  267,  266, 1208,  266,  266,  325,  266,  267,  266,
      266,  343,  267,  243,  245,  246,  267,  567,  318,  595,
     1208,  267,  315, 1208,  326,  327,  328,  326,  267,  325,
      316, 1197,  317,  328,  330,  328,  328,  569,  267,  320,
      319,  321,  332,  267,  324,  332,  426,  324,  427,  333,

      324,  192, 1208,  324,  324,  335,  336,  324, 1208,  322,
      329,  335,  336,  588,  324, 1208,  337,  324,  324,  329,
      324,  324,  580,  324, 1208,  338,  339,  568,  334,  324,
      325,  324,  324,  570,  324,  571,  325,  262,  263,  341,
      325,  344,  197,  390,  324,  324,  342,  324,  324,  364,
      325, 1208,  345, 1208,  325,  324,  325,  324,  324,  324,
      324,  346,  324,  347,  351,  325,  348,  325,  730,  353,
      349,  355,  579,  350,  324,  352,  324,  324, 1191,  324,
      325,  325,  324,  354,  324,  324, 1208,  324,  356,  357,
     1208,  325, 1208,  325,  324,  325,  590,  324,  362,  358,

      197,  390,  371,  360,  233,  371,  363, 1190,  359,  582,
      325,  233,  325,  324,  324,  361,  324,  324,  325,  601,
      325,  365,  366,  367,  365,  369,  327,  328,  369,  324,
      325,  324,  324,  368,  324, 1208,  324,  324,  372,  324,
      324,  324,  572, 1208,  324,  373, 1208, 1208,  324,  325,
      325,  324,  382,  383,  384,  382,  591,  325,  735,  354,
      374,  329,  583,  377, 1208,  325, 1208,  325,  386,  387,
      386,  386,  325,  325,  248,  250,  251,  325,  379,  375,
      380, 1208,  729,  376,  325,  378,  585, 1208,  385,  416,
      417,  416,  416,  419,  383,  384,  419,  878,  429, 1208,

      381,  429,  587,  589,  385,  431,  432,  433,  431,  435,
      432,  435,  435,  436,  437,  438,  436,  479,  480,  481,
      479,  266, 1208,  266,  266,  266, 1175,  266,  266,  385,
      482,  483,  482,  482,  430,  268,  269,  270,  268, 1208,
      274,  434,  266,  274, 1208,  434,  574,  275, 1208,  430,
      270,  269,  270,  270, 1208,  575,  266,  267,  266,  266,
      602,  267,  484,  308,  484,  484,  267, 1174,  592, 1208,
      477,  271,  274, 1208,  266,  274,  276,  759,  732,  275,
      485,  483,  482,  485,  619, 1208,  271,  275,  266,  747,
      266,  266,  267,  266, 1208,  266,  266,  599,  620,  266,

      279,  266,  266,  324,  280,  281,  324,  266,  276,  266,
      266,  279,  596,  582, 1208,  266,  276,  266,  266,  486,
      266, 1208,  266,  266,  267,  733,  280,  281,  266,  267,
      266,  266, 1208, 1208,  266,  267,  266,  266,  266,  325,
      266,  266,  488,  267,  266,  487,  266,  266,  739, 1173,
      266,  267,  266,  266,  731,  266,  267,  266,  266,  489,
      899, 1172,  492,  266,  267,  266,  266,  490,  324,  491,
      267,  324,  493,  494,  267,  266, 1208,  266,  266,  577,
      267,  495,  266, 1208,  266,  266,  267,  266,  743,  266,
      266,  267, 1208,  578, 1208,  266,  497,  266,  266,  267,

      266,  756,  266,  266,  325,  593, 1208,  496,  594,  600,
      498,  267,  266,  324,  266,  266,  324,  499,  267,  266,
      500,  266,  266,  267,  266, 1208,  266,  266,  501, 1208,
      266,  267,  266,  266,  749,  266,  267,  266,  266, 1171,
      424,  266,  502,  266,  266, 1208,  503, 1208,  267,  325,
      504,  266,  737,  266,  266,  267,  266,  506,  266,  266,
      267,  630,  425,  505,  631,  507,  267,  266, 1170,  266,
      266,  267, 1208,  266,  509,  266,  266,  267,  508,  746,
      760,  266,  510,  266,  266, 1208,  266,  267,  266,  266,
     1208, 1141,  267,  511,  307,  308,  307,  307,  266, 1208,

      266,  266,  728,  267,  734,  738,  512, 1208,  513,  267,
      312,  514,  312,  312, 1208, 1208,  312,  267,  312,  312,
      757,  748,  267,  516,  483,  516,  516,  745, 1208,  266,
      267,  266,  266,  266,  267,  266,  266,  266,  515,  266,
      266,  266,  750,  266,  266,  324,  313,  266,  324,  266,
      266,  332,  313,  266,  332,  266,  266,  337,  333,  313,
      192,  521,  517,  502,  266,  267,  266,  266,  266,  267,
      266,  266,  518,  267,  519, 1208, 1208,  267,  736,  318,
      520,  325,  266,  267,  266,  266, 1208,  334, 1208,  267,
      524,  525,  526,  524,  326,  327,  328,  326, 1208,  324,

      267,  319,  324,  740,  267,  755,  596, 1204,  522,  328,
      327,  328,  328,  367,  366,  367,  367,  523,  267, 1208,
      332,  767, 1208,  332,  529,  324,  325,  333,  324,  192,
      329,  527,  525,  526,  527,  325,  338,  339,  333,  324,
      192,  324,  324,  324,  324,  329,  324,  324,  758,  324,
      324,  337,  324,  528,  338,  339,  334,  324, 1138, 1208,
      324,  325,  324,  530,  876,  324,  324,  334,  324,  324,
     1137,  324,  531,  324, 1208,  325,  324,  325,  324,  325,
      534,  324, 1208,  325,  536,  325,  532, 1208,  533,  324,
      535,  537,  324,  325,  324,  883,  324,  324,  325,  324,

     1208, 1208,  325,  539,  325,  324,  761,  754,  324,  325,
      538,  897,  324,  324,  325,  324,  324,  540, 1208,  324,
      324,  542,  324,  324,  541,  325,  324,  875,  324,  324,
      325,  324,  325,  543,  900,  371,  324,  233,  371,  324,
      545,  325,  544,  324,  233,  546,  324, 1208,  325,  325,
      548,  324, 1208,  547,  324,  325,  325,  549,  550,  551,
      324,  879,  325,  324,  325,  324,  552,  324,  324,  877,
      324,  372,  325,  365,  366,  367,  365, 1208, 1136,  325,
      553,  367,  366,  367,  367,  324,  886,  325,  324,  555,
      554,  371,  556,  233,  371,  324,  325, 1208,  324,  324,

      233,  325,  324,  325,  558,  525,  559,  558,  324,  325,
     1135,  324,  324,  233, 1208,  324,  324,  324,  881,  324,
      324,  325, 1208,  324,  770,  557,  324,  372,  560,  544,
      564,  325,  885,  324,  324,  325,  324,  324,  561,  386,
      372,  386,  386,  377,  325,  562, 1208,  429,  325, 1208,
      429,  563,  325,  325,  382,  383,  384,  382, 1208,  325,
      386,  383,  386,  386,  882,  378,  884,  565, 1208,  325,
      325,  416,  417,  416,  416,  385,  416,  417,  416,  416,
     1006,  429,  566,  430,  429,  603,  604,  605,  603, 1208,
      385,  431,  432,  433,  431,  902,  385,  435,  432,  435,

      435,  438,  437,  438,  438,  435,  887,  435,  435,  436,
      437,  438,  436,  438,  437,  438,  438,  430, 1208, 1208,
      780,  430,  637,  638,  637,  637,  640,  434, 1208,  640,
      781, 1208,  888,  434,  646,  647,  648,  646,  880, 1134,
      266,  434,  266,  266, 1208,  430,  649,  650,  651,  649,
      479,  480,  481,  479,  481,  480,  481,  481,  482,  483,
      482,  482,  484,  308,  484,  484,  485,  483,  482,  485,
     1012,  662,  266,  275,  266,  266,  267,  266,  641,  266,
      266, 1208, 1208,  266,  486,  266,  266,  477,  889, 1208,
      266,  652,  266,  266,  267,  266, 1208,  266,  266,  477,

     1208,  996,  276,  256,  266, 1133,  266,  266,  267,  890,
      653, 1208,  266,  267,  266,  266,  891,  895,  654,  267,
      656,  266, 1208,  266,  266,  741,  267,  655,  898, 1208,
      266,  267,  266,  266,  657,  266,  892,  266,  266,  742,
      267,  266, 1208,  266,  266, 1208,  658,  789,  267,  660,
      894,  266,  324,  266,  266,  324,  659,  267,  266,  661,
      266,  266,  266, 1208,  266,  266,  267,  266,  916,  266,
      266,  267,  266,  997,  266,  266,  665,  267,  663,  266,
      692,  266,  266,  667,  917, 1033,  664,  267,  325,  266,
      666,  266,  266, 1208,  267,  790,  668,  266,  267,  266,

      266, 1208,  266,  267,  266,  266, 1208,  670,  267, 1098,
      669,  266,  671,  266,  266,  267,  266, 1208,  266,  266,
      672,  266, 1003,  266,  266,  267,  752,  673,  266,  753,
      266,  266,  266,  267,  266,  266, 1208, 1208,  267,  906,
      675,  674,  266,  893,  266,  266,  266,  267,  266,  266,
     1208,  266,  267,  266,  266, 1208,  901,  267,  896,  676,
      679, 1208,  677,  678,  267, 1208,  680,  681,  267,  266,
      994,  266,  266,  516,  483,  516,  516,  266,  267,  266,
      266,  998,  267,  683,  638,  683,  683,  267,  685, 1208,
      266,  685,  266, 1084,  266,  266,  266,  324,  266,  266,

      324,  266, 1208,  266,  266,  267,  682,  324,  999,  313,
      324,  690,  266,  267,  266,  266, 1208, 1208, 1208,  267,
      908,  684, 1208,  995,  267,  517,  324, 1095,  267,  324,
     1018, 1005,  267,  325,  691, 1009,  687,  267,  528,  324,
      686, 1002,  324,  325,  688, 1208, 1019,  909,  267,  524,
      525,  526,  524,  526,  525,  526,  526,  689,  527,  525,
      526,  527,  325,  324, 1208,  333,  324,  192, 1208,  324,
      324,  693,  324,  324,  324,  325, 1208,  324,  324,  694,
      324,  324, 1080,  324,  324,  325,  324,  324, 1094,  324,
      324,  695,  698,  324,  334,  696, 1208, 1004,  699,  325,

      697, 1208, 1082,  910,  324,  325,  325,  324,  324,  324,
      325,  324,  324,  701,  325,  700,  325, 1208,  702,  911,
      325, 1208,  325,  703,  705, 1093,  325,  324,  706,  324,
      324,  324,  324,  324,  324, 1083,  324,  704,  324,  324,
      325,  324,  324, 1208,  325,  325,  709,  708, 1011,  324,
      324,  710,  324,  324,  711, 1208,  324,  324,  707,  324,
      324, 1130, 1208,  325,  712,  325, 1092,  325,  713,  325,
      324, 1131, 1077,  324,  325,  325, 1208,  718,  912,  324,
      324,  714,  324,  324,  715,  325,  325,  716,  717, 1208,
     1091,  324,  325,  325,  324,  719,  558,  525,  559,  558,

      559,  525,  559,  559, 1008,  233,  325,  721,  638,  637,
      721,  723, 1090, 1208,  723,  325,  325,  720,  324,  324,
     1079,  324,  324,  324, 1208,  324,  324,  325,  324, 1000,
      640,  640,  372,  640,  640,  722, 1089, 1088,  637,  638,
      637,  637, 1208,  325, 1208, 1001,  913,  325,  560, 1208,
      603,  604,  605,  603,  325,  325, 1208,  798,  921,  325,
      798,  325,  725,  724, 1208, 1208,  726,  922, 1087, 1208,
      727,  605,  604,  605,  605,  637,  638,  637,  637, 1208,
     1078,  924,  641,  641, 1086, 1007,  430,  646,  647,  648,
      646,  648,  647,  648,  648,  649,  650,  651,  649,  651,

      650,  651,  651,  266, 1033,  266,  266, 1208,  266,  799,
      266,  266, 1208,  266, 1013,  266,  266,  266, 1126,  266,
      266, 1208,  798,  801,  802,  798, 1208, 1208,  266, 1014,
      266,  266,  266, 1208,  266,  266, 1208, 1208,  804,  267,
      256,  805,  324, 1081,  267,  324,  803, 1074,  256,  267,
     1032, 1127,  806,  267,  266, 1031,  266,  266,  266, 1085,
      266,  266,  838,  266,  267,  266,  266,  266,  267,  266,
      266,  808,  807,  266,  799,  266,  266,  266,  325,  266,
      266,  266, 1208,  266,  266,  266, 1030,  266,  266,  266,
      267,  266,  266,  810,  267,  809, 1128,  811,  266,  267,

      266,  266,  818,  267,  266,  814,  266,  266,  812,  267,
      813, 1208,  266,  267,  266,  266,  266,  267,  266,  266,
      266,  267,  266,  266, 1208,  267,  815, 1208,  816,  819,
      817, 1208, 1129,  266,  267,  266,  266, 1029, 1166,  266,
      267,  266,  266,  266, 1125,  266,  266,  266,  267,  266,
      266,  820,  267, 1208, 1028, 1015,  267,  822, 1208, 1132,
      821,  823,  266, 1027,  266,  266,  824, 1026,  266,  267,
      266,  266, 1167, 1025,  266,  267,  266,  266,  266,  267,
      266,  266,  826,  267, 1024, 1023,  266,  827,  266,  266,
      266,  828,  266,  266,  825, 1208, 1022,  266,  267,  266,

      266, 1208, 1168,  266,  267,  266,  266,  829, 1188,  685,
      267,  266,  685,  266,  267,  266,  266,  266,  830,  266,
      266,  266,  267,  266,  266, 1021,  267,  683,  638,  683,
      683, 1208,  836,  267,  266,  836, 1075,  324,  324,  267,
      324,  324, 1208,  324, 1017,  267,  324,  831,  832,  267,
     1020, 1017, 1076,  267,  839,  324, 1016,  267,  324,  835,
     1208,  686, 1022,  267,  841,  833, 1208,  834,  267,  324,
      840, 1015,  324,  325,  325,  843, 1014,  324,  324,  325,
      324,  324,  842,  324,  837,  324,  324,  324,  324,  324,
      324,  325,  324, 1169,  324,  844,  845,  324,  324,  324,

     1013,  324,  324,  324,  324,  325,  324,  324,  933,  324,
      846,  847,  324,  325,  325,  932,  850,  854,  848,  325,
      849,  325,  855,  325,  851,  325,  852,  853,  324,  324,
      325,  324,  324,  324,  325,  325,  324,  931, 1208,  325,
      325,  856,  930,  324,  324,  325,  324,  324,  929,  324,
      324,  859,  324,  324,  324, 1208,  324,  324,  324,  324,
      857,  324,  860,  324,  325,  325,  324,  864,  861,  325,
      858,  324,  863, 1196,  324,  324,  865,  866,  324,  325,
      325,  324,  862, 1189,  324,  325,  325, 1208,  723, 1023,
      325,  723,  325,  928,  325,  721,  638,  637,  721,  325,

      927,  324,  324,  867,  324,  324,  324,  325,  926,  324,
      873,  325,  798,  873, 1208,  798, 1024,  325,  925,  924,
      266,  868,  266,  266,  325,  266,  869,  266,  266,  923,
      266,  325,  266,  266, 1208,  922, 1027,  325,  325, 1208,
      724, 1086,  325,  935,  872,  266,  325,  266,  266, 1208,
      921,  934,  871,  870, 1096,  920,  267, 1096,  937,  919,
      936,  267,  874,  918,  799,  266,  267,  266,  266,  266,
      915,  266,  266,  266,  914,  266,  266,  266,  913,  266,
      266,  267,  266,  912,  266,  266,  939, 1200,  911,  266,
      938,  266,  266,  910,  266,  940,  266,  266, 1208,  909,

     1091,  267,  941,  908,  907,  267, 1097,  942,  266,  267,
      266,  266,  906,  267,  266,  905,  266,  266,  267,  904,
      266,  943,  266,  266, 1208,  267, 1093,  944,  903,  266,
      267,  266,  266, 1208,  800, 1135,  266,  797,  266,  266,
      266,  796,  266,  266,  267,  266,  795,  266,  266,  794,
      267,  945,  947,  793,  792,  266,  267,  266,  266,  946,
      266,  791,  266,  266,  266,  267,  266,  266,  948,  790,
      949,  266,  267,  266,  266,  324,  267,  952,  324,  789,
      266,  267,  266,  266,  266,  788,  266,  266, 1208,  787,
     1137,  267,  950,  953,  786,  266,  267,  266,  266,  266,

      267,  266,  266,  951,  785,  784,  964,  267,  955,  954,
      266,  325,  266,  266,  783,  266,  267,  266,  266,  324,
      267,  266,  324,  266,  266, 1208,  266, 1170,  266,  266,
      324,  267,  956,  324,  266,  267,  266,  266,  266,  324,
      266,  266,  324,  967,  782,  266,  267,  266,  266,  966,
      781,  267,  958,  957,  780,  325,  266,  267,  266,  266,
      779,  266,  267,  266,  266,  836,  325,  266,  836,  266,
      267,  266,  266,  324,  267,  325,  324,  324,  959,  960,
      324,  267,  324,  324,  778,  324,  324, 1208,  777, 1172,
      969,  965,  267,  324,  961,  776,  324,  267,  962,  324,

      775,  267,  324,  968,  774,  267,  970,  324,  773,  325,
      324,  324,  971,  325,  324,  772,  771,  837,  325,  325,
      972,  963,  324,  324,  973,  324,  324,  324,  324,  325,
      324,  324, 1208,  770, 1190,  325,  974,  324,  324,  324,
      324,  324,  324,  325,  977,  324,  324,  325,  324,  324,
      769,  324,  324,  975,  324,  324,  768,  976,  325,  325,
      978,  767,  766,  325,  325,  982,  324,  979,  324,  324,
     1208,  324, 1205,  325,  325,  325,  984,  980,  981,  983,
      324,  325,  325,  324,  765,  764,  324,  325,  325,  324,
      763,  324,  324,  985,  324,  324,  324,  324,  645,  324,

      324,  986,  325,  324,  325,  324,  324,  324,  324,  644,
      324,  324,  643,  469,  324,  873,  325,  324,  873,  642,
      324,  639,  325,  988,  987,  636,  324,  325,  325,  324,
      635,  634,  325,  325,  633,  266,  632,  266,  266,  325,
      989,  325,  629,  325,  990,  991,  324,  325,  992,  324,
      628,  325,  266,  325,  266,  266,  627,  266,  626,  266,
      266,  266,  325,  266,  266, 1034,  625,  874,  624,  993,
     1035,  267,  623,  266, 1036,  266,  266,  266, 1057,  266,
      266,  266,  325,  266,  266,  622,  621,  266,  267,  266,
      266,  618,  266,  267,  266,  266,  266,  267,  266,  266,

      266,  324,  266,  266,  324, 1037,  617,  616,  266,  267,
      266,  266,  266,  267,  266,  266,  615,  267,  614,  613,
      612, 1038,  266,  267,  266,  266,  611,  266,  267,  266,
      266,  266,  267,  266,  266,  610,  267,  325, 1039,  266,
     1041,  266,  266,  266,  267,  266,  266,  609,  267, 1042,
      608,  607, 1043,  606, 1040,  439, 1044,  266,  267,  266,
      266, 1208,  266,  267,  266,  266,  266,  267,  266,  266,
     1045,  266,  262,  266,  266,  267,  478,  477,  266,  267,
      266,  266,  256,  266, 1046,  266,  266,  266,  324,  266,
      266,  324,  266,  267,  266,  266, 1048,  266,  267,  266,

      266, 1054,  267, 1047,  252, 1049,  266,  267,  266,  266,
      266,  476,  266,  266,  267,  266,  248,  266,  266,  267,
      243,  475,  324,  267,  325,  324,  324,  324,  267,  324,
      324,  324,  474,  267,  324, 1055,  473,  324,  472, 1056,
      324, 1050,  267,  471,  470, 1052,  267, 1051,  242,  324,
      324,  267,  324,  324,  237,  236,  235,  324,  325, 1053,
      324, 1096,  325,  325, 1096,  324,  324,  325,  324,  324,
     1058,  468, 1208,  325,  324,  324,  324,  324,  324,  324,
      324, 1059,  465,  324,  464,  325,  325,  324, 1063, 1064,
      324,  463,  324,  325, 1061,  324, 1062, 1060,  462,  461,

     1065,  325,  325,  324,  324,  324,  324,  324,  324,  460,
      325,  325,  325, 1097,  324,  324,  325,  324,  324,  324,
      459, 1066,  324,  325,  458,  457,  324, 1068,  325,  324,
     1067,  324,  456, 1069,  324,  324,  455,  454,  324,  325,
      325,  325,  324,  453,  266,  324,  266,  266,  452,  449,
      325,  325,  448,  447,  266,  325,  266,  266,  266,  446,
      266,  266,  325,  266,  445,  266,  266,  325, 1070,  442,
     1072,  325,  266,  441,  266,  266, 1071,  440,  325,  266,
      267,  266,  266,  439, 1073, 1099,  196,  196,  193,  266,
      267,  266,  266,  266,  267,  266,  266, 1208,  266,  267,

      266,  266,  266,  264,  266,  266, 1139, 1100,  267, 1139,
      266, 1101,  266,  266,  266,  267,  266,  266, 1102,  266,
      260,  266,  266, 1103,  266,  267,  266,  266,  266,  267,
      266,  266, 1104,  266,  267,  266,  266,  324,  267,  266,
      324,  266,  266, 1107,  257,  266,  267,  266,  266,  256,
      267, 1109, 1106,  266, 1109,  267, 1105,  252, 1140,  266,
      267,  266,  266,  324,  267,  324,  324,  248,  324,  267,
      243,  324,  242,  325,  324,  267,  324,  324,  237,  324,
      324,  267,  324,  324, 1108,  324,  324,  267,  324, 1112,
      324,  324,  236,  324,  324,  267,  235,  324, 1111,  325,

      224,  325,  223, 1110, 1114, 1113,  324,  325, 1115,  324,
      218,  217,  325,  325,  324, 1116,  216,  324,  325,  325,
      324,  205,  324,  324,  325,  324,  325, 1117,  324,  324,
      325,  324,  324,  324, 1122,  324,  324, 1122,  324, 1120,
     1096, 1119,  325, 1096, 1142,  202,  266, 1142,  266,  266,
      325,  266, 1118,  266,  266,  199,  325,  196,  325,  266,
      193,  266,  266,  191,  325,  325, 1208, 1208, 1208,  325,
      325,  325, 1121, 1208, 1124,  266, 1144,  266,  266, 1208,
      324, 1208,  267,  324, 1145, 1208, 1123,  267, 1146, 1208,
     1208,  266, 1097,  266,  266,  267, 1143,  266, 1208,  266,

      266,  266, 1208,  266,  266,  266, 1208,  266,  266, 1147,
      266,  267,  266,  266, 1148, 1150,  325,  266, 1150, 1109,
     1208,  266, 1109,  266, 1208,  266,  266,  267, 1153,  324,
      266, 1153,  324,  267, 1208, 1208,  324,  267, 1208,  324,
      324,  267,  324,  324, 1208,  324,  267,  324, 1149,  324,
      324,  267,  324, 1157, 1155,  267, 1208, 1208, 1208,  267,
     1158, 1156, 1159,  324,  267,  325,  324, 1151, 1208, 1208,
      324, 1110,  325,  324, 1161, 1152,  325, 1161,  325, 1122,
     1154,  324, 1122,  325,  324,  325, 1164, 1139, 1208, 1164,
     1139, 1142, 1139, 1142, 1142, 1139, 1142, 1208, 1208,  325,

     1208,  266, 1208,  266,  266, 1208,  325, 1208, 1160, 1208,
      325, 1208, 1208, 1208, 1176,  325,  266,  325,  266,  266,
     1208,  266,  325,  266,  266,  324, 1162,  266,  324,  266,
      266, 1123, 1208, 1163, 1177, 1208, 1208,  267, 1165, 1140,
     1178, 1208, 1208, 1143, 1140, 1143,  266,  324,  266,  266,
      324,  266,  267,  266,  266, 1208, 1150,  267,  266, 1150,
     1182,  325,  266,  267,  266,  266,  266, 1208,  266,  266,
     1153, 1208,  266, 1153,  266,  324,  266,  266,  324, 1208,
     1208,  324,  267,  325,  324,  324, 1208,  267,  324, 1208,
     1179, 1208,  267, 1183, 1184, 1208,  324, 1161,  267,  324,

     1161,  324,  267, 1208,  324, 1208,  267, 1208, 1151,  324,
      267,  325,  324, 1208, 1180, 1164,  324,  325, 1164,  324,
      324,  325, 1154,  324, 1208,  266, 1181,  266,  266, 1208,
     1208, 1208,  325,  325, 1208, 1185,  266,  325,  266,  266,
     1208,  266, 1208,  266,  266,  325, 1208,  324, 1208, 1162,
      324,  325,  325, 1186, 1192,  266,  325,  266,  266, 1208,
      266,  267,  266,  266, 1208, 1208,  324, 1165, 1187,  324,
     1208,  266,  267,  266,  266,  324, 1208,  267,  324, 1194,
     1208,  324,  324,  325,  324,  324,  266, 1208,  266,  266,
      266,  267,  266,  266,  324,  324,  267,  324,  324, 1208,

      324, 1193,  325,  324, 1208, 1208,  266,  267,  266,  266,
      324,  325, 1208,  324, 1208, 1208, 1208,  325,  325, 1208,
      324, 1195,  267,  324, 1208,  266,  267,  266,  266, 1208,
      325,  325,  266, 1207,  266,  266,  325, 1208, 1206, 1198,
     1208, 1208,  267, 1208, 1199, 1208,  325, 1208, 1202, 1208,
     1208, 1208, 1203, 1208, 1208, 1208,  325, 1208, 1208, 1208,
     1208,  267, 1208, 1208, 1208, 1208, 1208, 1208,  267,   56,
       56,   56,   56,   56,   56,   61,   61,   61,   61,   61,
       61,   68,   68,   68,   68,   68,   68,   73,   73,   73,
       73,   73,   73,  184,  184,  184,  184,  184,  184,  192,

      192, 1208, 1208,  192,  192,  233,  233, 1208,  233,  233,
      233,  244,  244,  244,  244,  244,  244,  247, 1208, 1208,
     1208,  247,  247,  249,  249,  249,  249,  249,  249,  255,
      255, 1208, 1208,  255,  255,  261,  261,  261,  261,  261,
      261,  265,  265, 1208,  265,  265,  265,  273,  273, 1208,
      273,  273,  273,  311,  311, 1208,  311,  311,  311,  323,
      323, 1208, 1208, 1208,  323,  331,  331, 1208, 1208,  331,
      331,  370,  370, 1208,  370,  370,  370,  428,  428, 1208,
     1208, 1208,  428,   17, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208
    } ;

static yyconst flex_int16_t yy_chk[4140] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    7,    2,    2,
        3,    3,    3,    3,    5,    5,    6,    6,    2,    4,
        4,    4,    4,    4,    8,    8,   15,   15,   15,   15,
       19,    2,   37,   19,   67,   15,   33,    4,   24,   24,
       26,   26,   28,   28,    2,   31,   37,   33,   36,    2,

       43,    2,   31,    2,  396,   71,    2,    2,   43,   36,
       71,    5,   15,    6,   67,  396,    5,    4,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   38,   53,   10,   10,   16,
       16,   16,   16,   35,   42,   49,   35,   10,   16,   54,
       35,   54,   38,   35,   73,   73,   42,  422,   53,   49,

       10,   59,   59,   59,   64,   64,   64,   64,  157,  157,
      158,  158,  162,   10,  174,   16,  160, 1227,   10,  162,
       10,  174,   10,  422,  160,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,  164,  179,   12,   12,   76,  169,   76,
       76,   77,   77,   77,   77,   12,   79,   79,   79,   79,

      161,  163,  170,  167,  164,  166,  167,  169,   12,  168,
      161,  163,  168,  166,  403,  190,  170,  161,  190,  179,
      167,   12,  163,   76,  166, 1201,   12,   77,   12,  168,
       12,  403,   79,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,  180,  171,   14,   14,   80,  239,   80,   80,   81,

      258,   81,   81,   14,  115,  258,   81,  115,   82,  254,
       82,   82,   83,  171,   83,   83,   14,  176,  239,   82,
       82,   84,  181,   84,   84,   85, 1197,   85,   85,   14,
      180,   80,   84,   84,   14,   81,   14,   85,   14,  254,
      115,   14,   14,   46,   82,  176,   46,   46,   83,  408,
      119,  165,   86,  119,   86,   86,   46,   84,  181,  165,
      408,   85,  165,   86,   86,   87,  165,   87,   87,  165,
      172,   88,  582,   88,   88,   89,  178,   89,   89,  178,
      172,   90,   46,   90,   90,  582,  119,   46,   86,   46,
       88,  182,  172,  178,   46,   46,   89,  173,  399,   90,

      173,   87,   91,   89,   91,   91,  182,   88,  173,  900,
       92,   89,   92,   92,  195,  195,  208,   90,   93,  399,
       93,   93,   94,   91,   94,   94,  198,  198,  182,   95,
      208,   95,   95,   97,   91,   97,   97,   93,   91,  900,
       93,   94,   92,   95,   93,  406,   92,   93,   96,  421,
       96,   96,   94,   98,   93,   98,   98,   95,   94,  202,
      406,  202,   96,   97,   99,   95,   99,   99,  126,   97,
      100,  126,  100,  100,  102,  602,  102,  102,   98,   96,
      101,  421,  101,  101,   96,  103,  103,  103,  103,   98,
      223,  100,  102,  223,  101,  104,   99,  104,  104,  231,

       99,  231,  101,  100,  126,  106,  100,  106,  106,  602,
      102,  105,  105,  105,  105,  107,  101,  107,  107,  589,
      127,  103,  108,  127,  108,  108,  109,  589,  109,  109,
      110,  104,  110,  110,  104,  111,  108,  111,  111,  127,
      418,  106,  112,  129,  112,  112,  129,  105,  234,  234,
      108,  107,  113,  391,  113,  113,  127,  114,  108,  114,
      114,  129,  109,  246,  246,  246,  110,  391,  112,  418,
      183,  111,  109,  393,  116,  116,  116,  116,  112,  129,
      110, 1191,  111,  118,  118,  118,  118,  393,  113,  113,
      112,  113,  120,  114,  121,  120,  183,  121,  183,  120,

      123,  120,  410,  123,  124,  121,  121,  124,  402,  114,
      116,  123,  123,  410,  125,  394,  124,  125,  128,  118,
      130,  128,  402,  130,  392,  125,  125,  392,  120,  131,
      121,  141,  131,  394,  141,  394,  123,  261,  261,  128,
      124,  130,  389,  389,  132,  133,  128,  132,  133,  141,
      125,  569,  130,  401,  128,  134,  130,  135,  134,  136,
      135,  131,  136,  132,  133,  131,  132,  141,  569,  134,
      132,  135,  401,  132,  137,  133,  138,  137, 1173,  138,
      132,  133,  139,  134,  140,  139,  426,  140,  135,  136,
      404,  134,  412,  135,  143,  136,  412,  143,  140,  137,

      390,  390,  145,  139,  145,  145,  140, 1171,  138,  404,
      137,  145,  138,  146,  148,  139,  146,  148,  139,  426,
      140,  142,  142,  142,  142,  144,  144,  144,  144,  149,
      143,  147,  149,  143,  147,  395,  150,  151,  145,  150,
      151,  152,  395,  574,  152,  147,  405,  413,  153,  146,
      148,  153,  154,  154,  154,  154,  413,  142,  574,  147,
      148,  144,  405,  151,  407,  149,  568,  147,  156,  156,
      156,  156,  150,  151,  251,  251,  251,  152,  152,  149,
      152,  411,  568,  150,  153,  151,  407,  731,  154,  175,
      175,  175,  175,  177,  177,  177,  177,  731,  184,  409,

      153,  184,  409,  411,  156,  185,  185,  185,  185,  187,
      187,  187,  187,  189,  189,  189,  189,  260,  260,  260,
      260,  265,  427,  265,  265,  266, 1143,  266,  266,  177,
      267,  267,  267,  267,  184,  268,  268,  268,  268,  397,
      273,  185,  273,  273,  597,  187,  397,  273,  398,  189,
      270,  270,  270,  270,  414,  398,  275,  265,  275,  275,
      427,  266,  271,  271,  271,  271,  267, 1140,  414,  423,
      260,  268,  274,  571,  274,  274,  273,  597,  571,  274,
      276,  276,  276,  276,  453,  585,  270,  276,  277,  585,
      277,  277,  275,  278,  420,  278,  278,  423,  453,  279,

      277,  279,  279,  323,  278,  278,  323,  280,  274,  280,
      280,  279,  420,  420,  572,  281,  276,  281,  281,  280,
      282,  758,  282,  282,  277,  572,  281,  281,  283,  278,
      283,  283,  578,  570,  284,  279,  284,  284,  285,  323,
      285,  285,  283,  280,  286,  282,  286,  286,  578, 1138,
      287,  281,  287,  287,  570,  288,  282,  288,  288,  284,
      758, 1136,  286,  289,  283,  289,  289,  285,  324,  285,
      284,  324,  287,  288,  285,  290,  400,  290,  290,  400,
      286,  289,  291,  581,  291,  291,  287,  292,  581,  292,
      292,  288,  593,  400,  415,  293,  291,  293,  293,  289,

      294,  593,  294,  294,  324,  415,  424,  290,  415,  424,
      291,  290,  295,  333,  295,  295,  333,  292,  291,  296,
      293,  296,  296,  292,  297,  425,  297,  297,  294,  587,
      298,  293,  298,  298,  587,  299,  294,  299,  299, 1134,
      425,  302,  295,  302,  302,  576,  296,  599,  295,  333,
      297,  300,  576,  300,  300,  296,  301,  299,  301,  301,
      297,  463,  425,  298,  463,  300,  298,  303, 1133,  303,
      303,  299,  584,  304,  302,  304,  304,  302,  301,  584,
      599,  305,  303,  305,  305,  577,  306,  300,  306,  306,
      573, 1097,  301,  304,  307,  307,  307,  307,  309,  567,

      309,  309,  567,  303,  573,  577,  305,  583,  306,  304,
      311,  306,  311,  311,  586,  594,  312,  305,  312,  312,
      594,  586,  306,  313,  313,  313,  313,  583,  588,  315,
      307,  315,  315,  314,  309,  314,  314,  316,  309,  316,
      316,  317,  588,  317,  317,  335,  311,  318,  335,  318,
      318,  331,  312,  319,  331,  319,  319,  335,  331,  313,
      331,  318,  314,  314,  320,  315,  320,  320,  321,  314,
      321,  321,  315,  316,  316,  575, 1200,  317,  575,  319,
      317,  335,  322,  318,  322,  322,  579,  331,  600,  319,
      325,  325,  325,  325,  326,  326,  326,  326,  592,  340,

      320,  319,  340,  579,  321,  592,  600, 1200,  320,  328,
      328,  328,  328,  329,  329,  329,  329,  321,  322,  732,
      332,  732,  595,  332,  340,  336,  325,  332,  336,  332,
      326,  334,  334,  334,  334,  340,  336,  336,  334,  337,
      334,  338,  337,  339,  338,  328,  339,  342,  595,  341,
      342,  337,  341,  338,  339,  339,  332,  343, 1094,  729,
      343,  336,  344,  341,  729,  344,  346,  334,  345,  346,
     1092,  345,  342,  347,  601,  337,  347,  338,  348,  339,
      344,  348,  738,  342,  346,  341,  343,  591,  343,  349,
      345,  347,  349,  343,  350,  738,  351,  350,  344,  351,

      759,  756,  346,  349,  345,  352,  601,  591,  352,  347,
      348,  756,  353,  354,  348,  353,  354,  349,  728,  355,
      356,  351,  355,  356,  350,  349,  360,  728,  357,  360,
      350,  357,  351,  352,  759,  370,  359,  370,  370,  359,
      354,  352,  353,  358,  370,  355,  358,  730,  353,  354,
      357,  361,  733,  356,  361,  355,  356,  358,  359,  360,
      362,  733,  360,  362,  357,  363,  361,  364,  363,  730,
      364,  370,  359,  365,  365,  365,  365,  741, 1090,  358,
      362,  367,  367,  367,  367,  368,  741,  361,  368,  364,
      363,  371,  364,  371,  371,  374,  362,  736,  374,  373,

      371,  363,  373,  364,  372,  372,  372,  372,  375,  365,
     1089,  375,  376,  372,  740,  376,  377,  378,  736,  377,
      378,  368,  735,  379,  735,  368,  379,  371,  373,  373,
      377,  374,  740,  380,  381,  373,  380,  381,  374,  386,
      372,  386,  386,  378,  375,  375,  739,  428,  376,  737,
      428,  376,  377,  378,  382,  382,  382,  382,  896,  379,
      384,  384,  384,  384,  737,  378,  739,  379,  761,  380,
      381,  385,  385,  385,  385,  386,  416,  416,  416,  416,
      896,  429,  380,  428,  429,  430,  430,  430,  430,  742,
      382,  431,  431,  431,  431,  761,  384,  433,  433,  433,

      433,  434,  434,  434,  434,  435,  742,  435,  435,  436,
      436,  436,  436,  438,  438,  438,  438,  429,  745,  743,
      745,  430,  469,  469,  469,  469,  471,  431,  746,  471,
      746,  734,  743,  433,  477,  477,  477,  477,  734, 1088,
      497,  435,  497,  497,  902,  436,  478,  478,  478,  478,
      479,  479,  479,  479,  481,  481,  481,  481,  482,  482,
      482,  482,  484,  484,  484,  484,  485,  485,  485,  485,
      902,  497,  486,  485,  486,  486,  497,  487,  471,  487,
      487,  744,  877,  488,  486,  488,  488,  477,  744,  747,
      489,  487,  489,  489,  482,  490,  752,  490,  490,  478,

      748,  877,  485,  479,  491, 1087,  491,  491,  486,  747,
      488,  757,  492,  487,  492,  492,  748,  752,  489,  488,
      491,  493,  580,  493,  493,  580,  489,  490,  757,  749,
      494,  490,  494,  494,  492,  495,  749,  495,  495,  580,
      491,  496,  751,  496,  496,  754,  493,  754,  492,  495,
      751,  498,  531,  498,  498,  531,  494,  493,  499,  496,
      499,  499,  500,  879,  500,  500,  494,  501,  778,  501,
      501,  495,  502,  879,  502,  502,  500,  496,  498,  503,
      531,  503,  503,  501,  778, 1033,  499,  498,  531,  504,
      500,  504,  504,  755,  499,  755,  502,  505,  500,  505,

      505,  890,  506,  501,  506,  506,  590,  504,  502, 1032,
      503,  507,  505,  507,  507,  503,  508,  760,  508,  508,
      506,  509,  890,  509,  509,  504,  590,  507,  510,  590,
      510,  510,  511,  505,  511,  511,  750,  878,  506,  878,
      509,  508,  512,  750,  512,  512,  513,  507,  513,  513,
      875,  514,  508,  514,  514,  753,  760,  509,  753,  510,
      512,  886,  510,  511,  510, 1011,  513,  514,  511,  515,
      875,  515,  515,  516,  516,  516,  516,  518,  512,  518,
      518,  886,  513,  517,  517,  517,  517,  514,  519,  887,
      519,  519,  520, 1011,  520,  520,  521,  529,  521,  521,

      529,  522,  899,  522,  522,  515,  515,  530,  887,  516,
      530,  529,  523,  518,  523,  523,  876,  894,  880,  517,
      880,  518,  889,  876,  519,  521,  528, 1030,  520,  528,
      915,  894,  521,  529,  530,  899,  520,  522,  528,  532,
      519,  889,  532,  530,  522,  881,  915,  881,  523,  524,
      524,  524,  524,  526,  526,  526,  526,  523,  527,  527,
      527,  527,  528,  533, 1009,  527,  533,  527, 1006,  534,
      535,  532,  534,  535,  536,  532,  891,  536,  537,  533,
      538,  537, 1006,  538,  539,  524,  540,  539, 1029,  540,
      541,  534,  537,  541,  527,  535, 1010,  891,  538,  533,

      536,  882, 1009,  882,  544,  534,  535,  544,  543,  542,
      536,  543,  542,  540,  537,  539,  538,  883,  541,  883,
      539,  901,  540,  542,  543, 1028,  541,  545,  544,  546,
      545,  547,  546,  548,  547, 1010,  548,  542,  549,  550,
      544,  549,  550, 1083,  543,  542,  547,  546,  901,  551,
      552,  548,  551,  552,  549, 1000,  553,  555,  545,  553,
      555, 1082, 1082,  545,  550,  546, 1026,  547,  551,  548,
      554, 1083, 1000,  554,  549,  550,  884,  555,  884,  556,
      557,  552,  556,  557,  552,  551,  552,  553,  554,  898,
     1025,  561,  553,  555,  561,  556,  558,  558,  558,  558,

      559,  559,  559,  559,  898,  558,  554,  560,  560,  560,
      560,  562, 1021, 1005,  562,  556,  557,  557,  563,  564,
     1005,  563,  564,  565,  888,  566,  565,  561,  566,  888,
      640,  598,  558,  640,  598,  561, 1020, 1019,  596,  596,
      596,  596,  598,  560,  885,  888,  885,  562,  564,  596,
      603,  603,  603,  603,  563,  564,  892,  644,  892,  565,
      644,  566,  563,  562,  897,  893,  565,  893, 1018, 1001,
      566,  605,  605,  605,  605,  637,  637,  637,  637,  895,
     1001,  895,  640,  598, 1016,  897,  603,  646,  646,  646,
      646,  648,  648,  648,  648,  649,  649,  649,  649,  651,

      651,  651,  651,  652,  933,  652,  652, 1076,  653,  644,
      653,  653,  994,  654,  994,  654,  654,  655, 1076,  655,
      655, 1012,  762,  652,  653,  762,  997,  995,  656,  995,
      656,  656,  657,  762,  657,  657, 1008, 1077,  655,  652,
      646,  656,  690, 1008,  653,  690,  654,  997,  649,  654,
      931, 1077,  657,  655,  658,  930,  658,  658,  659, 1012,
      659,  659,  690,  660,  656,  660,  660,  661,  657,  661,
      661,  659,  658,  662,  762,  662,  662,  663,  690,  663,
      663,  664, 1078,  664,  664,  665,  929,  665,  665,  669,
      658,  669,  669,  661,  659,  660, 1078,  662,  666,  660,

      666,  666,  669,  661,  667,  665,  667,  667,  663,  662,
      664, 1080,  668,  663,  668,  668,  670,  664,  670,  670,
      671,  665,  671,  671, 1125,  669,  666, 1075,  667,  670,
      668, 1085, 1080,  672,  666,  672,  672,  928, 1125,  673,
      667,  673,  673,  674, 1075,  674,  674,  675,  668,  675,
      675,  671,  670,  996,  927,  996,  671,  673, 1126, 1085,
      672,  674,  676,  926,  676,  676,  675,  925,  677,  672,
      677,  677, 1126,  923,  678,  673,  678,  678,  679,  674,
      679,  679,  677,  675,  920,  919,  680,  678,  680,  680,
      681,  679,  681,  681,  676, 1128,  918,  682,  676,  682,

      682, 1167, 1128,  684,  677,  684,  684,  680, 1167,  685,
      678,  685,  685,  686,  679,  686,  686,  687,  681,  687,
      687,  688,  680,  688,  688,  917,  681,  683,  683,  683,
      683,  999,  689,  682,  689,  689,  999,  692,  691,  684,
      692,  691,  998,  693,  998,  685,  693,  682,  684,  686,
      916,  914,  999,  687,  691,  695,  907,  688,  695,  688,
     1002,  685, 1002,  683,  693,  686, 1130,  687,  689,  694,
      692,  905,  694,  692,  691,  695,  904,  696,  698,  693,
      696,  698,  694,  697,  689,  699,  697,  702,  699,  701,
      702,  695,  701, 1130,  700,  696,  697,  700,  704,  706,

      903,  704,  706,  705,  703,  694,  705,  703,  800,  707,
      698,  699,  707,  696,  698,  799,  702,  706,  700,  697,
      701,  699,  707,  702,  703,  701,  704,  705,  708,  709,
      700,  708,  709,  711,  704,  706,  711,  797, 1189,  705,
      703,  708,  796,  710,  712,  707,  710,  712,  794,  713,
      714,  711,  713,  714,  716, 1169,  718,  716,  715,  718,
      709,  715,  712,  717,  708,  709,  717,  716,  713,  711,
      710,  720,  715, 1189,  720,  719,  717,  718,  719,  710,
      712,  722,  714, 1169,  722,  713,  714, 1003,  723, 1003,
      716,  723,  718,  793,  715,  721,  721,  721,  721,  717,

      792,  724,  725,  719,  724,  725,  726,  720,  791,  726,
      727,  719,  798,  727, 1004,  798, 1004,  722,  788,  787,
      801,  720,  801,  801,  723,  802,  722,  802,  802,  786,
      803,  721,  803,  803, 1007,  785, 1007,  724,  725, 1074,
      723, 1074,  726,  802,  726,  804,  727,  804,  804, 1196,
      784,  801,  725,  724, 1031,  783,  801, 1031,  804,  782,
      803,  802,  727,  779,  798,  805,  803,  805,  805,  806,
      777,  806,  806,  807,  776,  807,  807,  808,  775,  808,
      808,  804,  809,  774,  809,  809,  807, 1196,  773,  810,
      806,  810,  810,  772,  811,  809,  811,  811, 1079,  771,

     1079,  805,  810,  769,  768,  806, 1031,  811,  812,  807,
      812,  812,  766,  808,  813,  765,  813,  813,  809,  764,
      814,  812,  814,  814, 1081,  810, 1081,  813,  763,  815,
      811,  815,  815, 1127,  645, 1127,  816,  643,  816,  816,
      817,  642,  817,  817,  812,  818,  641,  818,  818,  639,
      813,  814,  816,  636,  635,  819,  814,  819,  819,  815,
      820,  634,  820,  820,  822,  815,  822,  822,  816,  633,
      817,  821,  816,  821,  821,  838,  817,  822,  838,  632,
      823,  818,  823,  823,  824,  631,  824,  824, 1129,  630,
     1129,  819,  820,  823,  629,  825,  820,  825,  825,  826,

      822,  826,  826,  821,  628,  627,  838,  821,  825,  824,
      827,  838,  827,  827,  626,  828,  823,  828,  828,  840,
      824,  829,  840,  829,  829, 1166,  830, 1166,  830,  830,
      841,  825,  826,  841,  831,  826,  831,  831,  832,  842,
      832,  832,  842,  841,  625,  833,  827,  833,  833,  840,
      624,  828,  830,  829,  623,  840,  834,  829,  834,  834,
      622,  835,  830,  835,  835,  836,  841,  836,  836,  837,
      831,  837,  837,  839,  832,  842,  839,  844,  831,  832,
      844,  833,  843,  845,  621,  843,  845, 1168,  620, 1168,
      844,  839,  834,  846,  834,  619,  846,  835,  835,  847,

      618,  836,  847,  843,  617,  837,  846,  848,  616,  839,
      848,  849,  847,  844,  849,  615,  614,  836,  843,  845,
      848,  837,  851,  850,  849,  851,  850,  852,  853,  846,
      852,  853, 1188,  613, 1188,  847,  850,  854,  855,  856,
      854,  855,  856,  848,  853,  857,  858,  849,  857,  858,
      612,  861,  859,  851,  861,  859,  611,  852,  851,  850,
      853,  610,  609,  852,  853,  859,  860,  854,  863,  860,
     1204,  863, 1204,  854,  855,  856,  861,  857,  858,  860,
      862,  857,  858,  862,  608,  607,  864,  861,  859,  864,
      606,  865,  866,  862,  865,  866,  868,  867,  476,  868,

      867,  863,  860,  869,  863,  870,  869,  871,  870,  475,
      871,  872,  474,  473,  872,  873,  862,  874,  873,  472,
      874,  470,  864,  867,  866,  468,  967,  865,  866,  967,
      467,  466,  868,  867,  465,  937,  464,  937,  937,  869,
      868,  870,  462,  871,  869,  871,  968,  872,  872,  968,
      461,  873,  934,  874,  934,  934,  460,  935,  459,  935,
      935,  936,  967,  936,  936,  934,  458,  873,  457,  874,
      935,  937,  456,  938,  936,  938,  938,  939,  968,  939,
      939,  940,  968,  940,  940,  455,  454,  941,  934,  941,
      941,  452,  942,  935,  942,  942,  943,  936,  943,  943,

      944,  969,  944,  944,  969,  938,  451,  450,  945,  938,
      945,  945,  947,  939,  947,  947,  449,  940,  448,  447,
      446,  945,  946,  941,  946,  946,  445,  948,  942,  948,
      948,  952,  943,  952,  952,  444,  944,  969,  946,  949,
      947,  949,  949,  950,  945,  950,  950,  443,  947,  948,
      442,  441,  949,  440,  946,  439,  950,  951,  946,  951,
      951,  388,  953,  948,  953,  953,  954,  952,  954,  954,
      951,  955,  263,  955,  955,  949,  259,  256,  956,  950,
      956,  956,  255,  957,  954,  957,  957,  958,  964,  958,
      958,  964,  959,  951,  959,  959,  957,  960,  953,  960,

      960,  964,  954,  956,  253,  958,  961,  955,  961,  961,
      962,  252,  962,  962,  956,  963,  250,  963,  963,  957,
      245,  241,  965,  958,  964,  965,  966,  970,  959,  966,
      970,  971,  240,  960,  971,  965,  238,  972,  237,  966,
      972,  959,  961,  236,  235,  961,  962,  960,  232,  973,
      974,  963,  973,  974,  230,  229,  228,  975,  965,  962,
      975, 1084,  966,  970, 1084,  976,  977,  971,  976,  977,
      975,  224, 1084,  972,  978,  979,  980,  978,  979,  980,
      982,  976,  222,  982,  221,  973,  974,  981,  979,  980,
      981,  220,  983,  975,  977,  983,  978,  976,  219,  218,

      981,  976,  977,  984,  985,  986,  984,  985,  986,  217,
      978,  979,  980, 1084,  987,  988,  982,  987,  988,  989,
      216,  984,  989,  981,  215,  214,  990,  987,  983,  990,
      986,  991,  213,  988,  991,  992,  212,  211,  992,  984,
      985,  986,  993,  210, 1034,  993, 1034, 1034,  209,  207,
      987,  988,  206,  205, 1035,  989, 1035, 1035, 1036,  204,
     1036, 1036,  990, 1038,  203, 1038, 1038,  991,  989,  201,
      991,  992, 1037,  200, 1037, 1037,  990,  199,  993, 1039,
     1034, 1039, 1039,  197,  992, 1037,  196,  194,  192, 1040,
     1035, 1040, 1040, 1041, 1036, 1041, 1041,  159, 1042, 1038,

     1042, 1042, 1043,   75, 1043, 1043, 1095, 1039, 1037, 1095,
     1044, 1040, 1044, 1044, 1045, 1039, 1045, 1045, 1041, 1046,
       72, 1046, 1046, 1042, 1047, 1040, 1047, 1047, 1048, 1041,
     1048, 1048, 1046, 1050, 1042, 1050, 1050, 1054, 1043, 1049,
     1054, 1049, 1049, 1050,   70, 1051, 1044, 1051, 1051,   68,
     1045, 1052, 1049, 1052, 1052, 1046, 1047,   66, 1095, 1053,
     1047, 1053, 1053, 1055, 1048, 1056, 1055,   63, 1056, 1050,
       58, 1058,   55, 1054, 1058, 1049, 1057, 1059,   52, 1057,
     1059, 1051, 1060, 1061, 1051, 1060, 1061, 1052, 1063, 1057,
     1062, 1063,   51, 1062, 1064, 1053,   50, 1064, 1053, 1055,

       45, 1056,   44, 1052, 1060, 1059, 1065, 1058, 1061, 1065,
       41,   40, 1057, 1059, 1066, 1062,   39, 1066, 1060, 1061,
     1067,   34, 1068, 1067, 1063, 1068, 1062, 1066, 1069, 1070,
     1064, 1069, 1070, 1071, 1072, 1073, 1071, 1072, 1073, 1070,
     1096, 1069, 1065, 1096, 1098,   32, 1099, 1098, 1099, 1099,
     1066, 1100, 1067, 1100, 1100,   30, 1067,   27, 1068, 1101,
       23, 1101, 1101,   21, 1069, 1070,   17,    0,    0, 1071,
     1072, 1073, 1071,    0, 1073, 1102, 1100, 1102, 1102,    0,
     1112,    0, 1099, 1112, 1101,    0, 1072, 1100, 1102,    0,
        0, 1103, 1096, 1103, 1103, 1101, 1098, 1104,    0, 1104,

     1104, 1105,    0, 1105, 1105, 1106,    0, 1106, 1106, 1103,
     1107, 1102, 1107, 1107, 1105, 1108, 1112, 1108, 1108, 1109,
        0, 1109, 1109, 1110,    0, 1110, 1110, 1103, 1111, 1113,
     1111, 1111, 1113, 1104,    0,    0, 1114, 1105,    0, 1114,
     1115, 1106, 1116, 1115,    0, 1116, 1107, 1117, 1107, 1118,
     1117, 1108, 1118, 1115, 1113, 1109,    0,    0,    0, 1110,
     1116, 1114, 1118, 1119, 1111, 1113, 1119, 1108,    0,    0,
     1120, 1109, 1114, 1120, 1121, 1110, 1115, 1121, 1116, 1122,
     1111, 1123, 1122, 1117, 1123, 1118, 1124, 1131,    0, 1124,
     1131, 1132, 1139, 1142, 1132, 1139, 1142,    0, 1131, 1119,

        0, 1144, 1132, 1144, 1144,    0, 1120,    0, 1120,    0,
     1121,    0,    0,    0, 1144, 1122, 1145, 1123, 1145, 1145,
        0, 1146, 1124, 1146, 1146, 1157, 1121, 1147, 1157, 1147,
     1147, 1122,    0, 1123, 1145,    0,    0, 1144, 1124, 1131,
     1147,    0,    0, 1132, 1139, 1142, 1148, 1155, 1148, 1148,
     1155, 1149, 1145, 1149, 1149,    0, 1150, 1146, 1150, 1150,
     1155, 1157, 1151, 1147, 1151, 1151, 1152,    0, 1152, 1152,
     1153,    0, 1153, 1153, 1154, 1156, 1154, 1154, 1156,    0,
        0, 1158, 1148, 1155, 1158, 1159,    0, 1149, 1159,    0,
     1149,    0, 1150, 1156, 1158,    0, 1160, 1161, 1151, 1160,

     1161, 1162, 1152,    0, 1162,    0, 1153,    0, 1150, 1163,
     1154, 1156, 1163,    0, 1151, 1164, 1165, 1158, 1164, 1165,
     1182, 1159, 1153, 1182,    0, 1176, 1154, 1176, 1176,    0,
        0,    0, 1160, 1161,    0, 1160, 1178, 1162, 1178, 1178,
        0, 1177,    0, 1177, 1177, 1163,    0, 1184,    0, 1161,
     1184, 1164, 1165, 1162, 1177, 1179, 1182, 1179, 1179,    0,
     1180, 1176, 1180, 1180,    0,    0, 1183, 1164, 1165, 1183,
        0, 1181, 1178, 1181, 1181, 1185,    0, 1177, 1185, 1183,
        0, 1186, 1187, 1184, 1186, 1187, 1192,    0, 1192, 1192,
     1193, 1179, 1193, 1193, 1194, 1195, 1180, 1194, 1195,    0,

     1207, 1179, 1183, 1207,    0,    0, 1198, 1181, 1198, 1198,
     1199, 1185,    0, 1199,    0,    0,    0, 1186, 1187,    0,
     1203, 1185, 1192, 1203,    0, 1202, 1193, 1202, 1202,    0,
     1194, 1195, 1206, 1203, 1206, 1206, 1207,    0, 1202, 1193,
        0,    0, 1198,    0, 1195,    0, 1199,    0, 1198,    0,
        0,    0, 1199,    0,    0,    0, 1203,    0,    0,    0,
        0, 1202,    0,    0,    0,    0,    0,    0, 1206, 1209,
     1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210, 1210, 1210,
     1210, 1211, 1211, 1211, 1211, 1211, 1211, 1212, 1212, 1212,
     1212, 1212, 1212, 1213, 1213, 1213, 1213, 1213, 1213, 1214,

     1214,    0,    0, 1214, 1214, 1215, 1215,    0, 1215, 1215,
     1215, 1216, 1216, 1216, 1216, 1216, 1216, 1217,    0,    0,
        0, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1218, 1219,
     1219,    0,    0, 1219, 1219, 1220, 1220, 1220, 1220, 1220,
     1220, 1221, 1221,    0, 1221, 1221, 1221, 1222, 1222,    0,
     1222, 1222, 1222, 1223, 1223,    0, 1223, 1223, 1223, 1224,
     1224,    0,    0,    0, 1224, 1225, 1225,    0,    0, 1225,
     1225, 1226, 1226,    0, 1226, 1226, 1226, 1228, 1228,    0,
        0,    0, 1228, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,

     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[87] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include <algorithm>
#include <cstring>
#include <queue>
#include "AppHdr.h"
#include "mapdef.h"
#include "levcomp.tab.h"
#include "stuff.h"

static bool alloced = false;

std::queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = NULL;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right,
                           int strip_trailing, int strip_leading)
{
    char *s = NULL;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
    if (strip_leading)
    {
        const int original_length = strlen(text);
        if (original_length > strip_leading)
            memmove(text, text + strip_leading,
                    original_length - strip_leading);
        if (original_length >= strip_leading)
            text[original_length - strip_leading] = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing, int strip_leading)
{
    char *newstring = NULL;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing, strip_leading);
    }
    return (newstring);
}

static void settext(bool trim_right = false,
                    int strip_trailing = 0,
                    int strip_leading = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing, strip_leading);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing, 0);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1929 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 145 "levcomp.lpp"


#line 2129 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1209 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1208 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 208 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLAGS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return BFLAGS; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
return COLON;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "levcomp.lpp"
return PERC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
return DASH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 287 "levcomp.lpp"
{
                        clean();
                        yylval.f = strtod(yytext, NULL);
                        return NUMBER;
                    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 293 "levcomp.lpp"
{
                        settext(true, 1, 1);
                        return STRING;
                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 298 "levcomp.lpp"
;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 299 "levcomp.lpp"
;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 300 "levcomp.lpp"
;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 301 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2716 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1209 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1209 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1208);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 303 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

